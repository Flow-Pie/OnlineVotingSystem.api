@page "/vote"
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components
@using OnlineVotingSystem.api.DTOs.ElectionPosition;
@using OnlineVotingSystem.api.DTOs.Candidate;
@using OnlineVotingSystem.api.DTOs.Vote;
@inject NavigationManager NavManager
@inject IVoteService VotesService
@rendermode InteractiveServer


<main class="voting-container bg-light scrollable-container">
   

    <!-- Loading Overlay -->
    @if (isLoading)
    {
        <div class="position-fixed top-0 start-0 vw-100 vh-100 bg-white opacity-75 d-flex justify-content-center align-items-center">
            <div class="spinner-border" style="width: 3rem; height: 3rem; color: var(--enterprise-primary)" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    <div class="container py-5">
        <!-- Enterprise Header Section -->
    <header class="bg-gradient-primary shadow-lg rounded-3 p-4 mb-5" style="border: 1px solid rgba(42, 92, 141, 0.15); background: linear-gradient(135deg, rgba(245, 248, 250, 0.9) 0%, white 100%)">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <!-- Left Section - Branding and Security -->
            <div class="d-flex align-items-center gap-3">
                <div class="border-start border-3 ps-3" style="border-color: var(--enterprise-accent)!important">
                    <div class="d-flex align-items-baseline">
                        <i class="bi bi-shield-lock me-2" style="color: var(--enterprise-primary); font-size: 1.25rem"></i>
                        <h2 class="h3 mb-0 fw-bold" style="color: var(--enterprise-primary); letter-spacing: -0.5px; text-shadow: 0 1px 1px rgba(0,0,0,0.05)">
                            National Elections 2027
                        </h2>
                    </div>
                    <div class="d-flex align-items-center mt-1">
                        <small class="text-muted small me-3" style="font-family: 'Courier New', monospace; font-weight: 600">
                            <i class="bi bi-person-badge me-1"></i> Voter ID: @userId
                        </small>
                        <span class="badge rounded-pill py-1 px-2" style="background-color: var(--enterprise-chart-bg); color: var(--enterprise-primary)">
                            <i class="bi bi-patch-check-fill me-1" style="color: var(--enterprise-success)"></i>
                            Verified
                        </span>
                    </div>
                </div>

                <div class="vr opacity-25" style="height: 2rem"></div>
                
                <div class="d-flex align-items-center px-3 py-1 rounded-pill" style="background-color: rgba(25, 135, 84, 0.1)">
                    <i class="bi bi-shield-check me-2" style="color: var(--enterprise-success); font-size: 1.1rem"></i>
                    <span class="small fw-medium" style="color: var(--enterprise-success)">
                        Secure Session Active
                    </span>
                </div>
            </div>
            
            <!-- Right Section - Actions -->
            <div class="d-flex align-items-center gap-3">
                <div class="vr opacity-25 d-none d-md-block" style="height: 2rem"></div>
                
                <button class="btn d-flex align-items-center rounded-pill" 
                        @onclick="ToggleHelp"
                        style="border: 1px solid var(--enterprise-border); 
                            background-color: white;
                            color: var(--enterprise-primary);
                            padding: 0.5rem 1.25rem;
                            transition: all 0.2s ease"
                        onmouseover="this.style.backgroundColor='var(--enterprise-primary)'; this.style.color='white'" 
                        onmouseout="this.style.backgroundColor='white'; this.style.color='var(--enterprise-primary)'">
                    <i class="bi bi-life-preserver me-2"></i>
                    <span class="fw-medium">Voting Assistance</span>
                </button>
            </div>
        </div>

        <!-- Status Alert -->
        <div class="alert fade show shadow-sm mb-0" 
            role="alert"
            style="width: 340px; 
                    border-left: 3px solid var(--enterprise-primary);
                    background-color: white;
                    border-radius: 8px;
                    padding: 1rem">
            <div class="d-flex align-items-center">
                <div class="me-3 p-2 rounded-circle" style="background-color: rgba(42, 92, 141, 0.1)">
                    <i class="bi @statusIcon fs-5" style="color: var(--enterprise-primary)"></i>
                </div>
                <div>
                    <h6 class="alert-heading mb-1 fw-semibold" style="color: var(--enterprise-primary)">Voting Status</h6>
                    <p class="small mb-0 fw-medium" style="color: var(--enterprise-secondary)">
                        @voteStatus
                        <span class="ms-2 badge bg-transparent border border-success text-success small fw-normal py-1">
                            <i class="bi bi-check-circle-fill me-1"></i>Live
                        </span>
                    </p>
                </div>                    
            </div>
        </div>
    </header>

        <!-- Voting Progress -->
        @if (electionPositions.Any())
        {
            <div class="progress-steps mb-5 mx-5">
                <div class="d-flex justify-content-between position-relative">
                    <div class="progress position-absolute w-100" style="height: 3px; top: 20px">
                        <div class="progress-bar" role="progressbar" 
                            style="width: @(progressPercentage)%; background-color: var(--enterprise-primary)"></div>
                    </div>
                    
                    @foreach (var (position, index) in electionPositions.Select((p, i) => (p, i)))
                    {
                        <div class="step-item d-flex flex-column align-items-center">
                            <div class="step-icon text-white rounded-circle d-flex justify-content-center align-items-center mb-2"
                                style="width: 40px; height: 40px; background-color: @(currentStep > index ? "var(--enterprise-success)" : currentStep == index ? "var(--enterprise-primary)" : "var(--enterprise-secondary)")">
                                @if(currentStep > index) {
                                    <i class="bi bi-check2"></i>
                                } else {
                                    @(index + 1)
                                }
                            </div>
                            <small class="text-center" style="color: var(--enterprise-secondary)">@position.Position</small>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Main Voting Interface -->
        @if (electionPositions.Any() && currentStep < electionPositions.Count())
        {
            var currentPosition = electionPositions.ElementAt(currentStep);
            <section class="bg-white rounded-3 shadow-sm p-4">
                <div class="d-flex align-items-center mb-4 p-3 rounded-top" style="background-color: var(--enterprise-primary); border-bottom: 2px solid var(--enterprise-accent)">
                <div class="d-flex align-items-baseline flex-wrap">
                    <h3 class="h4 mb-0 text-white fw-semibold me-3" style="letter-spacing: -0.5px; font-size: 1.5rem; text-shadow: 0 1px 2px rgba(0,0,0,0.1)">
                        <i class="bi bi-person-badge me-2"></i>
                        @currentPosition.Position
                    </h3>
                    <span class="badge rounded-pill align-self-center py-2 px-3" 
                        style="background-color: white; color: var(--enterprise-primary); font-weight: 600; letter-spacing: 0.5px">
                        <i class="bi bi-file-text me-1"></i>
                        Page @(currentPage + 1) of @totalPages
                    </span>
                </div>
                <div class="ms-auto">
                    <div class="input-group border-0 shadow-sm" style="width: 280px; border-radius: 20px; overflow: hidden">
                        <span class="input-group-text bg-white border-0">
                            <i class="bi bi-search" style="color: var(--enterprise-secondary)"></i>
                        </span>
                        <input type="text" 
                            class="form-control border-0 ps-0" 
                            placeholder="Search candidates..." 
                            @bind="searchQuery"
                            style="color: var(--enterprise-primary); font-weight: 500">
                    </div>
                </div>
            </div>

                <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4">
                    @foreach (var candidate in filteredCandidates)
                    {
                        <div class="col">
                            <div class="card h-100" style="border-color: @(selectedCandidate?.Id == candidate.Id ? "var(--enterprise-primary)" : "var(--enterprise-border)")">
                                <div class="card-header position-relative bg-transparent">
                                    <div class="avatar-lg rounded-circle d-inline-flex align-items-center justify-content-center"
                                         style="border-color: var(--enterprise-border)">
                                        <i class="bi bi-person-badge-fill fs-1" style="color: var(--enterprise-primary)"></i>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title mb-3" style="color: var(--enterprise-primary)">@candidate.Name</h5>
                                    <div class="d-flex gap-2 mb-3">
                                        <span class="badge fs-6" 
                                              style="background-color: var(--enterprise-chart-bg); color: var(--enterprise-primary)">
                                            @candidate.Party
                                        </span>                                      
                                    </div>
                                    <div class="row g-2 mb-3">
                                        <div class="col-12">
                                            <div class="d-flex align-items-center" style="color: var(--enterprise-secondary)">
                                                <i class="bi bi-person-badge me-2"></i>
                                                <small>8 yrs Public Service</small>
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <div class="d-flex align-items-center" style="color: var(--enterprise-secondary)">
                                                <i class="bi bi-award me-2"></i>
                                                <small>@candidate.Bio</small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="d-grid gap-2">
                                        <button class="btn" 
                                                style="background-color: @(selectedCandidate?.Id == candidate.Id ? "var(--enterprise-success)" : "var(--enterprise-primary)"); color: white"
                                                @onclick="() => ShowConfirmation(candidate)">
                                            <i class="bi bi-check2-circle me-2"></i>
                                            @(selectedCandidate?.Id == candidate.Id ? "Confirmed" : "Select Candidate")
                                        </button>
                                        <button class="btn btn-link text-decoration-none" 
                                                style="color: var(--enterprise-accent)"
                                                @onclick="() => ShowCandidateModal(candidate)">
                                            View Full Profile <i class="bi bi-arrow-right"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination Controls -->
                <nav class="d-flex justify-content-between align-items-center mt-4">                    
                    <div>
                        <button class="btn btn-outline-secondary" @onclick="PrevPosition" 
                                style="border-color: var(--enterprise-border); color: var(--enterprise-primary)">
                            <i class="bi bi-arrow-left me-2"></i> Previous
                        </button>
                    </div>
                    <div>
                        <ul class="pagination mb-0">
                            @for (int i = 0; i < totalPages; i++)
                            {
                                <li class="page-item @(currentPage == i ? "active" : "")">
                                    <button class="page-link" 
                                            style="background-color: @(currentPage == i ? "var(--enterprise-primary)" : "transparent"); 
                                                    color: @(currentPage == i ? "white" : "var(--enterprise-primary)")"
                                            @onclick="() => GoToPage(i)">
                                        @(i + 1)
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                    <div>
                        <button class="btn btn-outline-secondary" @onclick="SkipPosition"
                                style="border-color: var(--enterprise-border); color: var(--enterprise-primary)">
                            Skip <i class="bi bi-arrow-right me-2"></i>
                        </button>
                    </div>
                </nav>
            </section>
        }
        else
        {
            <!-- Review Section -->
           <div class="card rounded-3 border-0 shadow-sm">
            <div class="card-header bg-transparent d-flex justify-content-between align-items-center py-3" style="border-bottom: 2px solid var(--enterprise-border)">
                <div>
                    <h3 class="h5 fw-bold mb-0" style="color: var(--enterprise-primary)">Vote Review</h3>
                    <small class="text-muted">Review your selections before final submission</small>
                </div>
                <span class="badge rounded-pill py-2 px-3" style="background-color: var(--enterprise-chart-bg); color: var(--enterprise-primary)">
                    @electionPositions.Count Positions
                </span>
            </div>
            
            <div class="table-responsive">
                <table class="table align-middle mb-0">
                    <thead style="background-color: var(--enterprise-primary)">
                        <tr>
                            <th class="ps-4 text-white">Position</th>
                            <th class="text-white">Selected Candidate</th>
                            <th class="text-white">Party</th>
                            <th class="text-end pe-4 text-white">Status</th>
                            <th class="text-end pe-4 text-white">action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var position in electionPositions)
                        {
                            var hasSelection = selections.TryGetValue(position.Position, out var candidate);
                            <tr>
                                <td class="ps-4" style="color: var(--enterprise-secondary)">
                                    <div class="d-flex align-items-center gap-3">
                                        <div class="avatar-icon rounded-circle d-flex align-items-center justify-content-center" 
                                            style="background-color: var(--enterprise-chart-bg); width: 36px; height: 36px">
                                            <i class="bi bi-person-fill" style="color: var(--enterprise-primary)"></i>
                                        </div>
                                        <div>
                                            <div class="fw-semibold" style="color: var(--enterprise-primary)">@position.Position</div>                                           
                                        </div>
                                    </div>
                                </td>
                                <td style="color: var(--enterprise-primary)">
                                    @if (hasSelection ){
                                        @candidate.Name 
                                    }
                                    else {
                                         <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                                        <span class="text-muted small">No selection made</span>
                                    }
                                </td>
                                <td>
                                    @if (hasSelection) {
                                         <span class="badge rounded-pill py-2 px-3" 
                                                  style="background-color: green;">
                                                @candidate.Party
                                        </span>
                                    }else{
                                         <span class="badge rounded-pill py-2 px-3" 
                                                  style="background-color: green;">
                                                No party
                                        </span>
                                    }
                                </td>
                                <td class="text-end pe-4">
                                    <div class="d-flex align-items-center justify-content-end gap-2">
                                        @if (hasSelection) {
                                            <i class="bi bi-check-circle-fill text-success"></i>
                                            <span class="text-muted small">Confirmed</span>
                                        } else {
                                            <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                                            <span class="text-muted small">Pending</span>
                                        }
                                    </div>
                                </td>
                                <td class="text-end pe-4">
                                    @if (hasSelection)
                                    {
                                        <button class="btn btn-sm btn-link text-decoration-none" 
                                                style="color: var(--enterprise-accent)"
                                                @onclick="() => EditSelection(position.Position)">
                                            <i class="bi bi-pencil-square"></i>
                                            <span class="visually-hidden">Edit</span>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="card-footer bg-transparent py-3" style="border-top: 2px solid var(--enterprise-border)">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="text-muted small">
                        <i class="bi bi-shield-lock me-2"></i>
                        All votes are encrypted end-to-end
                    </div>
                    <button class="btn btn-lg px-5 rounded-pill" 
                        style="background-color: var(--enterprise-success); color: white"
                        disabled="@isSubmitting"
                        @onclick="StartSecureSubmission">  
                    <i class="bi bi-send-check me-2"></i>
                    @if (isSubmitting) {
                        <span>Finalizing Submission...</span>
                    } else {
                        <span>Confirm & Submit</span>
                    }
                </button>

                                </div>
            </div>
        </div>
        }
    </div>

    <!-- Confirmation Modal -->
    @if (showConfirmation)
    {
        <div class="modal fade show" style="display: block;">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Selection</h5>
                        <button type="button" class="btn-close" @onclick="CancelSelection"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to select @pendingCandidate?.Name for @currentSeat?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-success" @onclick="ConfirmSelection">Confirm</button>
                        <button class="btn btn-outline-secondary" @onclick="CancelSelection">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Submission Progress Modal -->
    @if (showSubmissionProgress)
    {
       <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5)">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <h5 class="modal-title text-danger">
                            <i class="bi bi-shield-lock me-2"></i>Secure Vote Submission
                        </h5>
                    </div>
                    <div class="modal-body">
                        <div class="submission-steps">
                            <div class="step-item @GetStepClass(1)">
                                <div class="step-icon">
                                    <i class="bi @GetStepIcon(1)"></i>
                                </div>
                                <div class="step-content">
                                    <h6>Validating Selections</h6>
                                    <small class="text-muted">Verifying vote integrity</small>
                                </div>
                            </div>

                            <div class="step-item @GetStepClass(2)">
                                <div class="step-icon">
                                    <i class="bi @GetStepIcon(2)"></i>
                                </div>
                                <div class="step-content">
                                    <h6>Encrypting Data</h6>
                                    <small class="text-muted">Applying AES-256 encryption</small>
                                </div>
                            </div>

                            <div class="step-item @GetStepClass(3)">
                                <div class="step-icon">
                                    <i class="bi @GetStepIcon(3)"></i>
                                </div>
                                <div class="step-content">
                                    <h6>Securing Connection</h6>
                                    <small class="text-muted">Establishing TLS 1.3 tunnel</small>
                                </div>
                            </div>

                            <div class="step-item @GetStepClass(4)">
                                <div class="step-icon">
                                    <i class="bi @GetStepIcon(4)"></i>
                                </div>
                                <div class="step-content">
                                    <h6>Final Confirmation</h6>
                                    <small class="text-muted">Committing to backend api</small>
                                </div>
                            </div>
                        </div>

                        <div class="mt-4 text-center">
                            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 text-primary fw-bold">@currentStatusMessage</p>
                        </div>
                    </div>
                    <div class="modal-footer border-0 justify-content-center">
                        <button class="btn btn-danger" @onclick="CancelSubmission" disabled="@(!allowCancel)">
                            <i class="bi bi-x-circle me-2"></i>Abort Process
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }

    <!-- Help Modal -->
    <div class="modal @(showHelp ? "show" : "")" style="@(showHelp ? "display: block" : "display: none"); background: rgba(0,0,0,0.5)">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Voting Assistance</h5>
                    <button type="button" class="btn-close" @onclick="ToggleHelp"></button>
                </div>
                <div class="modal-body">
                    <p class="lead">Select candidates for each position following these steps:</p>
                    <ol>
                        <li>Browse candidates using pagination controls</li>
                        <li>Review candidate details and qualifications</li>
                        <li>Click 'Select' to choose your preferred candidate</li>
                        <li>Verify all selections before final submission</li>
                    </ol>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="ToggleHelp">Close</button>
                </div>
            </div>
        </div>
    </div>   

    @if (selectedCandidate != null)
    {
        <div class="modal-backdrop show d-block"></div>
        <div class="modal fade show d-block" tabindex="-1" aria-modal="true" role="dialog">
            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
                <div class="modal-content shadow-lg">
                    <div class="modal-header text-white" style="background-color: var(--enterprise-primary);">
                        <h2 class="modal-title h5">Candidate Details</h2>
                        <button type="button" class="btn-close btn-close-white" @onclick="CloseDetails" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row align-items-center">
                            <div class="col-md-4 text-center mb-4 mb-md-0">
                                <div class="avatar-lg bg-primary-subtle rounded-circle d-inline-flex align-items-center justify-content-center">
                                    <i class="bi bi-person-badge-fill fs-1 text-primary"></i>
                                </div>
                                <h3 class="h4 mt-3 mb-1">@selectedCandidate.Name</h3>
                                <p class="text-muted mb-0">@selectedCandidate.Party</p>
                            </div>
                            <div class="col-md-8">
                                <dl class="row g-3">
                                    <dt class="col-sm-4 text-muted">Position</dt>
                                    <dd class="col-sm-8 fw-semibold">@selectedCandidate.Position</dd>
                                    <dt class="col-sm-4 text-muted">Election</dt>
                                    <dd class="col-sm-8">@selectedCandidate.Election</dd>
                                    <dt class="col-sm-4 text-muted">Bio</dt>
                                    <dd class="col-sm-8 candidate-bio">@selectedCandidate.Bio</dd>
                                    <dt class="col-sm-4 text-muted">Party</dt>
                                    <dd class="col-sm-8">
                                        <span class="badge bg-primary-subtle text-primary fs-6">
                                            @selectedCandidate.Party
                                        </span>
                                    </dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDetails">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }


</main>


@code {
    // SERVICES
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private IElectionsService ElectionService { get; set; }
    [Inject] private ICandidatesService CandidateService { get; set; }
    [Inject] private IAuthService UserService { get; set; }

    // ELECTION DATA
    private List<ElectionPositionSerialized> electionPositions = new();
    private Guid currentElectionId = Guid.Parse("44444444-4444-4444-4444-444444444444");
    private List<CandidateSerializedDto> allCandidates = new();

    // USER & UI STATE
    private string userId = string.Empty;
    private bool isLoading = false;
    private bool isSubmitting = false;
    private bool showHelp = false;
    private bool showCandidateModal = false;
    private bool showConfirmation = false;
    private bool showSubmissionProgress = false;
    private bool showStatusAlert = true;
    private void ToggleHelp() => showHelp = !showHelp;

    // VOTING STATE
    private int currentStep = 0;
    private int currentPage = 0;
    private string searchQuery = string.Empty;
    private Dictionary<string, CandidateSerializedDto> selections = new();
    private CandidateSerializedDto selectedCandidate;
    private CandidateSerializedDto pendingCandidate;
    private const int pageSize = 6;

    // STATUS TRACKING
    private string voteStatus = "Not Submitted";
    private string voteStatusClass = "status-default";  
    private string statusIcon = "bi-person";
    private string currentStatusMessage = "";
    private bool allowCancel = true;
    private readonly string[] statusMessages =
    {
        "Initializing military grade encryption...",
        "Verifying vote integrity",
        "Encrypting sensitive data",
        "Establishing secure channel",
        "Finalizing vote commitment"
    };

    // Submission progress tracker (separate from voting step)
    private int submissionStep = 0;

    // Computed Properties
   private string currentSeat =>
    electionPositions.Any() && currentStep < electionPositions.Count
        ? electionPositions[currentStep].Position
        : string.Empty;

    private double progressPercentage => electionPositions.Any()
    ? (currentStep / (double)electionPositions.Count) * 100
    : 0;


   private IEnumerable<CandidateSerializedDto> filteredCandidates =>
    allCandidates.Where(c => c.Position == currentSeat)
                 .Where(c => string.IsNullOrEmpty(searchQuery) ||
                             c.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                             c.Party.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                 // If 'IsIncumbent' property doesn't exist, order by Name instead:
                 .OrderBy(c => c.Name)
                 .Skip(currentPage * pageSize)
                 .Take(pageSize);

    private int totalPages =>
    (int)Math.Ceiling(allCandidates.Count(c => c.Position == currentSeat) / (double)pageSize);

    private bool HasNextPage =>
    allCandidates.Count(c => c.Position == currentSeat) > (currentPage + 1) * pageSize;

    protected override async Task OnInitializedAsync()
    {
        
       isLoading = true;
        
        try 
        {
            
            @* userId = await UserService.GetUserIdAsync(); *@
            await LoadElectionData();
            
            if (string.IsNullOrEmpty(userId))
                throw new Exception("User not authenticated");
            
          
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            //NavManager.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadElectionData()
    {
        try
        {
            isLoading = true;
            var positionsTask = ElectionService.GetElectionPositionsAsync(currentElectionId);
            var candidatesTask = CandidateService.GetSerializedCandidatesAsync();
            await Task.WhenAll(positionsTask, candidatesTask);
            electionPositions = (await positionsTask).ToList();
            allCandidates = (await candidatesTask).ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading data: {ex.Message}");
            ShowStatusMessage("Failed to load election data", "danger");
        }
        finally
        {
            isLoading = false;
        }
    }


    // Pagination methods
    private void GoToPage(int pageIndex)
    {
        if (pageIndex >= 0 && pageIndex < totalPages)
        {
            currentPage = pageIndex;
        }
    }
    private void NextPage() => currentPage = Math.Min(totalPages - 1, currentPage + 1);
    private void PreviousPage() => currentPage = Math.Max(0, currentPage - 1);

    // Candidate selection and confirmation
    private void SelectCandidate(CandidateSerializedDto candidate)
    {
        // Log the key for debugging
        JSRuntime.InvokeVoidAsync("console.log", $"Storing candidate {candidate.Name} for seat: {currentSeat}");
        selections[currentSeat] = candidate;
        selectedCandidate = candidate;
    }


    private void ShowConfirmation(CandidateSerializedDto candidate)
    {
        pendingCandidate = candidate;
        showConfirmation = true;
        StateHasChanged();
    }

   private async Task ConfirmSelection()
    {
        try
        {
            if (pendingCandidate != null)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Selection confirmed for " + pendingCandidate.Name);
                SelectCandidate(pendingCandidate);
                MoveToNextStep();
            }
        }
        catch (Exception ex)
        {
            // Handle error if needed
        }
        finally
        {
            showConfirmation = false;
            pendingCandidate = null;
        }
    }

    private void CancelSelection()
    {
        showConfirmation = false;
        pendingCandidate = null;
        StateHasChanged();
    }

     private void CloseDetails()
    {
        selectedCandidate = null;
    }

    private void MoveToNextStep()
    {
        if (currentStep < electionPositions.Count - 1)
        {
            currentStep++;
            ResetPagination();
        }
        else
        {
            currentStep = electionPositions.Count;
        }
        showConfirmation = false;
        pendingCandidate = null;
        StateHasChanged();
    }

    private void ResetPagination()
    {
        currentPage = 0;
        searchQuery = string.Empty;
        selectedCandidate = null;
    }

    private void SkipPosition()
    {
        if (selections.ContainsKey(currentSeat))
            selections.Remove(currentSeat);
        if (currentStep < electionPositions.Count - 1)
        {
            currentStep++;
            ResetPagination();
        }
        else
        {
            currentStep = electionPositions.Count; // Move to review stage
        }
        StateHasChanged();
    }

    private void PrevPosition()
    {
        if (selections.ContainsKey(currentSeat))
            selections.Remove(currentSeat);
        // Only decrement if currentStep is greater than 0
        if (currentStep > 0)
        {
            currentStep--;
            ResetPagination();
        }
        else
        {
            currentStep = 0; // Ensure it doesn't go negative
        }
        StateHasChanged();
    }



    // Secure submission workflow
    private async Task StartSecureSubmission()
    {
        showSubmissionProgress = true;
        isSubmitting = true;
        allowCancel = true;
        submissionStep = 0;

        try
        {
            foreach (var message in statusMessages)
            {
                if (!showSubmissionProgress) break;

                currentStatusMessage = message;
                submissionStep++;
                StateHasChanged();
                await Task.Delay(2000);
            }

            if (showSubmissionProgress)
            {
                allowCancel = false;
                await SubmitVotes();
            }
        }
        catch (Exception ex)
        {
            currentStatusMessage = $"Submission protocol failure: {ex.Message}";
            ShowStatusMessage($"Submission failed {ex.Message}", "danger");
        }
        finally
        {
            showSubmissionProgress = false;
            isSubmitting = false;
        }
    }

   private async Task SubmitVotes()
    {
        // List to collect error messages from the API.
        var submissionErrors = new List<string>();

        // Loop through all election positions and submit votes only for positions with a selection.
        foreach (var position in electionPositions)
        {
            if (!selections.ContainsKey(position.Position))
            {
                await JSRuntime.InvokeVoidAsync("console.log", $"No candidate selected for {position.Position}. Skipping this position.");
                continue;
            }

            var candidate = selections[position.Position];

            // Build the vote DTO.
            var voteDto = new CreateVoteDto(
                Guid.Parse(userId),
                candidate.Id,
                position.Id
            );
            var dtoJson = System.Text.Json.JsonSerializer.Serialize(voteDto);
            await JSRuntime.InvokeVoidAsync("console.log", $"Submitting DTO: {dtoJson}");

            try
            {
                // Submit the vote via the real API call.
                var result = await VotesService.SubmitVoteAsync(voteDto);

                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("console.log", $"Vote successfully submitted for {position.Position}");
                }
                else
                {
                    var errorMessage = result.ErrorMessage ?? "Unknown error occurred.";
                    await JSRuntime.InvokeVoidAsync("console.log", $"Vote submission failed for {position.Position}: {errorMessage}");
                    submissionErrors.Add($"{position.Position}: {errorMessage}");
                }
            }
            catch (Exception ex)
            {
                var exMessage = ex.Message;
                await JSRuntime.InvokeVoidAsync("console.log", $"Exception during vote submission for {position.Position}: {exMessage}");
                submissionErrors.Add($"{position.Position}: {exMessage}");
            }
        }

        // Surface errors if any, otherwise show success.
        if (submissionErrors.Any())
        {
            ShowStatusMessage($"Vote submission failed: {string.Join("; ", submissionErrors)}", "danger");
        }
        else
        {
            ShowStatusMessage("All votes successfully submitted", "success");
        }
    }




    // Helpers for submission steps
    private string GetStepClass(int step)
    {
        if (step < submissionStep) return "completed";
        if (step == submissionStep) return "processing";
        return "";
    }
    private string GetStepIcon(int step)
    {
        if (step < submissionStep) return "bi-check2 text-white";
        if (step == submissionStep) return "bi-shield-check text-white";
        return "bi-circle";
    }

    // Status alert helper
    private void ShowStatusMessage(string message, string type)
    {
        voteStatus = message;
        voteStatusClass = $"alert-{type}";
        statusIcon = type switch
        {        
            "success" => "bi-check-circle-fill text-success", 
            "danger"  => "bi-exclamation-circle-fill text-danger", 
            _         => "bi-info-circle-fill"
        };
    }

    // Modal controls
    private void ShowCandidateModal(CandidateSerializedDto candidate)
    {
        selectedCandidate = candidate;
        showCandidateModal = true;
        StateHasChanged();
    }
    private void CloseModal() { showCandidateModal = false; StateHasChanged(); }
    private void BackdropClick()
    {
        if (showHelp) ToggleHelp();
        if (showConfirmation) CancelSelection();
        if (showSubmissionProgress) CancelSubmission();
    }
    private void CancelSubmission()
    {
        showSubmissionProgress = false;
        isSubmitting = false;
        currentStep = 0;
        StateHasChanged();
    }   


    private bool GetCandidateIsIncumbent(CandidateSerializedDto? candidate) =>
        // return false as default. atleast for now
        false;

   private string GetCandidateExperience(CandidateSerializedDto? candidate) =>
    candidate == null ? "No experience provided" : "Experiencenot provided"; 

    private string GetCandidateEducation(CandidateSerializedDto? candidate) =>
    candidate == null ? "No Education details provided" : "No education details provided";

    private List<string> GetCandidatePolicies(CandidateSerializedDto? candidate) =>
        candidate == null ? new List<string> { "No policies provided" } : new List<string> { "No policies provided" };

    private string GetCandidateImage(CandidateSerializedDto? candidate) =>
        candidate?.PhotoUrl?.ToString() ?? "https://robohash.org/default?size=200x200&set=set1";





    // Helper: Returns party logo URL based on party name. TODO!!
    private string GetPartyLogo(string party) => party switch
    {
        "Democratic Party of Kenya" => "/images/parties/democratic.png",
        "United Progressive Alliance" => "/images/parties/upa.png",
        "Kenya African National Union" => "/images/parties/kanu.png",
        _ => "/images/parties/default.png"
    };

    // Position navigation: Allow editing a previous selection.
    private void EditSelection(string position)
    {
        var index = electionPositions.FindIndex(pos => pos.Position == position);
        if (index >= 0)
        {
            currentStep = index;
            selections.Remove(position);
            currentPage = 0;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        // TODO!!
    }
}