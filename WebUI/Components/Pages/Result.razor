@page "/results"
@rendermode InteractiveServer
@using System.Text
@using System.Timers
@using OnlineVotingSystem.api.DTOs.Election
@using OnlineVotingSystem.api.Entities
@implements IDisposable
@inject IJSRuntime JSRuntime

<main class="container mt-4 scrollable-container">
    <style>       
        

        .card {
            border: 1px solid var(--enterprise-border);
            border-radius: 8px;
            transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            background: white;
        }

        .card-header {
            background: var(--enterprise-chart-bg);
            border-bottom: 1px solid var(--enterprise-border);
            padding: 1.25rem 1.5rem;
        }

        .nav-tabs {
            border-bottom: 2px solid var(--enterprise-border);
        }

        .nav-tabs .nav-link {
            font-weight: 600;
            color: var(--enterprise-secondary);
            padding: 1rem 1.75rem;
            border: none;
            position: relative;
        }

        .nav-tabs .nav-link.active {
            color: var(--enterprise-primary);
            background: transparent;
        }

        .nav-tabs .nav-link.active::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--enterprise-accent);
        }

        .data-table {
            --bs-table-bg: transparent;
            --bs-table-striped-bg: rgba(72,163,198,0.03);
            border-collapse: separate;
            border-spacing: 0 8px;
        }

        .data-table thead th {
            background-color: var(--enterprise-primary);
            color: white;
            padding: 1rem 1.5rem;
            border: none;
            font-weight: 600;
        }

        .data-table tbody tr {
            background: white;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.03);
            transition: transform 0.2s ease;
        }

        .data-table tbody tr:hover {
            transform: translateX(4px);
        }

        .progress-track {
            height: 8px;
            border-radius: 4px;
            background-color: rgba(72,163,198,0.08);
        }

        .progress-bar {
            border-radius: 4px;
            background-color: var(--enterprise-accent);
        }

        .metric-card {
            border-left: 4px solid var(--enterprise-accent);
            transition: all 0.2s ease;
        }

        .metric-card:hover {
            border-left-color: var(--enterprise-primary);
        }
       

        .avatar-icon {
            width: 40px;
            height: 40px;
            background: rgba(72,163,198,0.1);
            display: flex;
            align-items: center;
            justify-content: center;
        }


        @@media (max-width: 768px) {
            .scrollable-container {
                max-height: none;
                overflow-y: visible;
            }
            
            .nav-tabs .nav-link {
                padding: 0.75rem 1rem;
                font-size: 0.9rem;
            }
        }

        

    </style>

      @if (isLoading)
    {
        <div class="d-flex flex-column align-items-center justify-content-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading results...</span>
            </div>
            <p class="mt-3 text-muted fw-semibold">Initializing real-time results...</p>
        </div>
    }

    else if (errorOccurred)
    {
        <div class="alert alert-danger border-2 border-danger-subtle d-flex align-items-center">
            <i class="bi bi-exclamation-octagon-fill fs-4 me-3"></i>
            <div class="flex-grow-1">
                <h5 class="alert-heading mb-2">Data Load Error</h5>
                <p class="mb-0">@errorMessage</p>
            </div>
            <button class="btn btn-outline-danger" @onclick="LoadData">
                Retry
            </button>
        </div>
    }

    else
    {
        <!-- Header Section -->
        <div class="d-flex flex-column gap-2 mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h2 fw-bold text-primary mb-0">
                        @electionsList?.FirstOrDefault(e => e.Id == selectedElectionId)?.Title
                    </h1>
                    <div class="text-muted small">Live Official Results Dashboard</div>
                </div>
                <div class="d-flex flex-column align-items-end">
                    <span class="badge bg-danger bg-opacity-15 text-danger px-3 py-2 mb-2">
                        <i class="bi bi-broadcast me-2"></i>LIVE RESULTS
                    </span>
                    <div class="text-muted small">
                        Updated: @DateTime.Now.ToString("HH:mm:ss")
                    </div>
                </div>
            </div>
            
            <div class="row g-3 mt-2">
                <div class="col-md-4">
                @if (loadingElections)
                {
                    <div class="form-control border-primary-subtle">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Loading elections...</span>
                        </div>
                        Loading elections...
                    </div>
                }
                else if (!electionsList.Any())
                {
                    <div class="form-control border-danger-subtle text-danger">
                        <i class="bi bi-exclamation-circle me-2"></i>
                        No elections available
                    </div>
                }
                else
                {
                    <select class="form-select border-primary-subtle" 
                        @bind="_selectedElectionId"
                        aria-label="Select election">
                    @foreach (var election in electionsList)
                    {
                        <option value="@election.Id">@election.Title</option>
                    }
                </select>
                }
            </div>
            </div>
        </div>

        <hr class="border-primary-subtle my-4">

        <!-- Key Metrics -->
        <div class="row g-3 mb-4">
            <div class="col-md-4">
                <div class="card metric-card h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="avatar-icon rounded-circle">
                                <i class="bi bi-people-fill fs-5 text-primary"></i>
                            </div>
                            <div>
                                <div class="text-muted small mb-1">Total Votes Cast</div>
                                <div class="h3 fw-bold text-primary">@TotalVotes.ToString("N0")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card metric-card h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="avatar-icon rounded-circle">
                                <i class="bi bi-person-check-fill fs-5 text-success"></i>
                            </div>
                            <div>
                                <div class="text-muted small mb-1">Voter Turnout</div>
                                <div class="h3 fw-bold text-success">@($"{CalculatedTurnout:F1}%")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card metric-card h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="avatar-icon rounded-circle">
                                <i class="bi bi-clock-history fs-5 text-warning"></i>
                            </div>
                            <div>
                                <div class="text-muted small mb-1">Next Refresh</div>
                                <div class="h3 fw-bold text-warning">@refreshCountdown sec</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Position Navigation -->
        <div class="mb-4">
            <ul class="nav nav-tabs">
                @foreach (var position in Positions)
                {
                    <li class="nav-item">
                        <button class="nav-link @(position == selectedPosition ? "active" : "")"
                                @onclick="() => SelectPosition(position)"
                                aria-current="@(position == selectedPosition ? "true" : "false")">
                            <i class="bi bi-person-badge me-2"></i>@position
                        </button>
                    </li>
                }
            </ul>
        </div>

        <!-- Results Section -->
        <div class="row g-4">
            <!-- Main Data Table -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="h5 fw-bold mb-0">@selectedPosition Results</h3>
                            <small class="text-muted">Showing @FilteredResults.Length candidates</small>
                        </div>
                        <button class="btn btn-outline-primary btn-sm" 
                                @onclick="ExportCSV"
                                aria-label="Export to CSV">
                            <i class="bi bi-filetype-csv me-1"></i>Export
                        </button>
                    </div>
                    
                    <div class="table-responsive">
                        <table class="table data-table">
                            <thead>
                                <tr>
                                    <th class="ps-4">Candidate</th>
                                    <th>Party</th>
                                    <th class="text-end pe-4">Votes</th>
                                    <th class="text-end pe-4">Percentage</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var candidate in FilteredResults)
                                {
                                    var percentage = GetVotePercentageNumber(candidate.TotalVotes, candidate.PositionName);
                                    
                                    <tr>
                                        <td class="ps-4">
                                            <div class="d-flex align-items-center gap-3">
                                                <div class="avatar-icon rounded-circle">
                                                    @candidate.CandidateName[0]
                                                </div>
                                                <div>
                                                    <div class="fw-semibold">@candidate.CandidateName</div>
                                                    <small class="text-muted">@candidate.PositionName</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge rounded-pill py-2 px-3" 
                                                  style="background-color: green;">
                                                @candidate.Party
                                            </span>
                                        </td>
                                        <td class="text-end pe-4 fw-semibold">
                                            @candidate.TotalVotes.ToString("N0")
                                        </td>
                                        <td class="text-end pe-4">
                                            <div class="d-flex flex-column gap-2">
                                                <div class="progress-track">
                                                    <div class="progress-bar" 
                                                         style="width: @percentage%;"></div>
                                                </div>
                                                <div class="text-primary fw-semibold">
                                                    @percentage.ToString("F1")%
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (!FilteredResults.Any())
                    {
                        <div class="text-center py-5 text-muted">
                            <i class="bi bi-info-circle fs-2"></i>
                            <div class="mt-2">No candidates found for this position</div>
                        </div>
                    }
                </div>
            </div>

            <!-- Visualization Sidebar -->
            <div class="col-lg-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h3 class="h5 fw-bold mb-0">Data Visualization</h3>
                        </div>
                        <div class="card-body p-3">
                            <div class="chart-container p-2">
                                <div class="card mt-4">
                        <div class="card-header">
                            <h3 class="h5 fw-bold mb-0">
                                <i class="bi bi-trophy me-2 text-warning"></i>
                                Current Leaders
                            </h3>
                        </div>
                        <div class="list-group list-group-flush">
                            @foreach (var position in Positions)
                            {
                                var leader = results.Where(r => r.PositionName == position)
                                                .OrderByDescending(r => r.TotalVotes)
                                                .FirstOrDefault();
                                
                                @if (leader != null)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <div class="fw-semibold text-primary">@position</div>
                                                <div class="text-muted small">@leader.Party</div>
                                            </div>
                                            <div class="text-end">
                                                <div class="fw-bold">@leader.CandidateName</div>
                                                <div class="text-success small">
                                                    @leader.TotalVotes.ToString("N0") votes
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                </div>
                </div>
                
            </div>
     </div>
    
    }
</main>

@code {
    @inject IElectionsService ElectionService
    private List<ElectionDetailsDto>? electionList;
    private bool isLoading = true;
    private bool errorOccurred;
    private string errorMessage = string.Empty;
    private ElectionResultsView[] results = Array.Empty<ElectionResultsView>();
    private Timer? refreshTimer;
    private Timer? countdownTimer;
    private int refreshCountdown = 30;
    private string selectedPosition = "President";
    private bool isExporting = false;
    private bool isDeleting = false;
    
    [Inject] private ILogger<ElectionResultsView> Logger { get; set; } = null!;

    private IEnumerable<string> Positions => results.Select(r => r.PositionName).Distinct();
    private decimal TotalVotes => results.Where(r => r.PositionName == selectedPosition).Sum(r => r.TotalVotes);
    private decimal CalculatedTurnout => CalculateTurnout();
    private ElectionResultsView[]? elections;
    private decimal registeredVoters;
    private bool autoRefreshEnabled = true;
    private Guid _selectedElectionId;
    private bool loadingElections;
    private List<ElectionDetailsDto> electionsList = new();

    private List<ChartSegment> pieChartData = new();
    private string[] colorPalette = { "#2A5C8D", "#5F7D95", "#48A3C6", "#3A9D85", "#D82B20" };
    private bool hasChartData => FilteredResults?.Any() == true;
    private IJSObjectReference? chartModule;
    private IJSObjectReference? chartInstance;



    private Guid selectedElectionId
    {
        get => _selectedElectionId;
        set
        {
            if (_selectedElectionId != value)
            {
                _selectedElectionId = value;
                InvokeAsync(LoadData);
            }
        }
    }

   
    private decimal GetMaxVotes() => FilteredResults.Any() 
        ? FilteredResults.Max(r => r.TotalVotes) 
        : 1;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            electionList = (await ElectionService.GetElectionsAsync()).ToList();
            
            if (electionList?.Any() == true)
            {
                selectedElectionId = electionList[0].Id;
                await LoadData();
            }
            await LoadElections();

            SetupTimers();
        }
        catch (Exception ex)
        {
            HandleError("Initialization failed", ex);
        }
    }

    private async Task LoadElections()
    {
        try
        {
            loadingElections = true;
            var response = await ElectionService.GetElectionsAsync();
            electionsList = response.ToList();
            
            if (electionsList.Any())
            {
                selectedElectionId = electionsList[0].Id;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load elections: {ex.Message}";
            errorOccurred = true;
        }
        finally
        {
            loadingElections = false;
            StateHasChanged();
        }
    }

    private async Task OnElectionSelected(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid electionId))
        {
            selectedElectionId = electionId;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try 
        {
            if (selectedElectionId == Guid.Empty) return;

            isLoading = true;
            errorOccurred = false;
            StateHasChanged();

            var allResults = await ElectionService.GetElectionsResultsAsync();
            results = allResults.Where(r => r.ElectionId == selectedElectionId).ToArray();
            
            if (!results.Any()) return;
            
            if (string.IsNullOrEmpty(selectedPosition))
            {
                selectedPosition = Positions.FirstOrDefault() ?? "";
            }

            // Get registered voters from first result 
            registeredVoters = results.FirstOrDefault()?.RegisteredVoters ?? 0;
        }
        catch (Exception ex)
        {
            HandleError("Data load failed", ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
      


    private void SelectPosition(string position)
    {
        selectedPosition = position;
        InvokeAsync(StateHasChanged);
    }

    private decimal GetVotePercentageNumber(decimal votes, string position)
    {
        var total = results.Where(r => r.PositionName == position).Sum(r => r.TotalVotes);
        return total > 0 ? Math.Round(votes / total * 100m, 1) : 0;
    }

    private decimal CalculateTurnout()
    {
        if (!results.Any() || results.All(r => r.RegisteredVoters == 0))
            return 0;

        var election = results.First();
        var totalVotes = results
            .Where(r => r.PositionName == selectedPosition)
            .Sum(r => r.TotalVotes);

        return Math.Round((totalVotes / (decimal)election.RegisteredVoters) * 100, 2);
    }
    private ElectionResultsView[] FilteredResults => results
        .Where(r => r.PositionName == selectedPosition)
        .OrderByDescending(r => r.TotalVotes)
        .ToArray();

    private async Task ExportCSV()
    {
        try 
        {
            var filtered = FilteredResults;
            var totalVotes = filtered.Sum(x => x.TotalVotes);
            
            var csvContent = new StringBuilder();
            csvContent.AppendLine("Candidate,Party,Votes,Percentage");
            
            foreach (var item in filtered)
            {
                var percentage = totalVotes > 0 
                    ? Math.Round((item.TotalVotes * 100m) / totalVotes, 2)
                    : 0;
                csvContent.AppendLine($"{item.CandidateName},{item.Party},{item.TotalVotes},{percentage}");
            }

            var fileName = $"{selectedPosition.Replace(" ", "_")}_Results.csv";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, csvContent.ToString());
        }
        catch (Exception ex)
        {
            HandleError("CSV export failed", ex);
        }
    }

    private void SetupTimers()
    {
        refreshTimer = new Timer(30000);
        refreshTimer.Elapsed += async (_, _) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Start();

        countdownTimer = new Timer(1000);
        countdownTimer.Elapsed += (_, _) => UpdateCountdown();
        countdownTimer.AutoReset = true;
        countdownTimer.Start();
    }

    private async Task RefreshData()
    {
        if (!autoRefreshEnabled || isLoading) return;
        
        try
        {
            isLoading = true;
            await InvokeAsync(StateHasChanged);
            
            // Force new data load
            var freshResults = await ElectionService.GetElectionsResultsAsync();
            results = freshResults.Where(r => r.ElectionId == selectedElectionId).ToArray();
            
        }
        finally
        {
            isLoading = false;
            refreshCountdown = 30;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateCountdown()
    {
        if (refreshCountdown > 0)
        {
            refreshCountdown--;
            InvokeAsync(StateHasChanged);
        }
    }
   

    private void HandleError(string context, Exception ex)
    {
        Logger.LogError(ex, context);
        errorMessage = $"{context}: {ex.Message}";
        errorOccurred = true;
        StateHasChanged();
    }     

    public async ValueTask DisposeAsync()
    {
        if (chartInstance != null)
        {
            await chartInstance.DisposeAsync();
        }

        if (chartModule != null)
        {
            await chartModule.DisposeAsync();
        }
    }
    public void Dispose()
    {
        refreshTimer?.Dispose();
        countdownTimer?.Dispose();
    }
}