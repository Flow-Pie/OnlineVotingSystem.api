@page "/results"
@rendermode InteractiveServer
@using System.Text
@using System.Timers
@using OnlineVotingSystem.api.DTOs.Election
@inject IElectionsService ElectionsService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@implements IDisposable

<main class="container mt-4 scrollable-container">
    <style>
    :root {
        --enterprise-primary: #2A5C8D;
        --enterprise-secondary: #5F7D95;
        --enterprise-accent: #48A3C6;
        --enterprise-success: #3A9D85;
        --enterprise-border: #EBEFF2;
    }

    .scrollable-container {
        max-height: calc(100vh - 120px);
        overflow-y: overlay;
        scroll-behavior: smooth;
    }

    .card {
        border: 1px solid var(--enterprise-border);
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
        transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.08);
    }

    .nav-tabs {
        border-bottom: 2px solid var(--enterprise-border);
    }

    .nav-tabs .nav-link {
        font-weight: 600;
        color: var(--enterprise-secondary);
        padding: 1rem 2rem;
        border-radius: 6px 6px 0 0;
        transition: all 0.2s ease;
    }

    .nav-tabs .nav-link.active {
        color: var(--enterprise-primary);
        border-color: transparent;
        background: linear-gradient(to bottom, rgba(42,92,141,0.1) 0%, rgba(255,255,255,0) 100%);
        border-bottom: 3px solid var(--enterprise-accent);
    }

    .table {
        --bs-table-bg: transparent;
        --bs-table-striped-bg: rgba(72,163,198,0.03);
        border-collapse: separate;
        border-spacing: 0 4px;
    }

    .table thead th {
        background-color: var(--enterprise-primary);
        color: white;
        padding: 1rem 1.5rem;
        border: none;
    }

    .table tbody tr {
        background-color: white;
        border-radius: 6px;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);
        transition: box-shadow 0.2s ease;
    }

    .table tbody tr:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
        background-color: white;
    }

    .progress {
        height: 8px;
        border-radius: 4px;
        background-color: rgba(72,163,198,0.1);
    }

    .progress-bar {
        border-radius: 4px;
        background-image: linear-gradient(
            to right,
            var(--enterprise-accent),
            var(--enterprise-success)
        );
    }

    .badge-status {
        background-color: var(--enterprise-success);
        padding: 0.375rem 1rem;
        font-size: 0.75rem;
        letter-spacing: 0.5px;
    }

    .chart-container {
        background: linear-gradient(145deg, rgba(255,255,255,0.8) 0%, rgba(245,248,250,0.8) 100%);
        backdrop-filter: blur(4px);
        border-radius: 12px;
        border: 1px solid var(--enterprise-border);
    }

    .avatar-sm {
        width: 40px;
        height: 40px;
        background: rgba(72,163,198,0.1);
        color: var(--enterprise-accent);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    
</style>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading election results...</p>
        </div>
    }
    else if (errorOccurred)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Failed to load results</h4>
            <p>@errorMessage</p>
            <button class="btn btn-primary" @onclick="LoadData">Retry</button>
        </div>
    }
    else
    {
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                @if(elections != null ){
                    <h1 class="fw-bold mb-0 text-primary">@elections.FirstOrDefault(e => e.Id == selectedElectionId)?.Title</h1>
                }
                <div class="text-muted">Live Official Results</div>
            </div>
            <div class="text-end">
                <span class="badge bg-danger badge-status">LIVE</span>
                <div class="text-muted small mt-1">Last updated: @DateTime.Now.ToString("HH:mm:ss")</div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-4">
                <div class="form-group">
                    <label class="form-label">Select Election:</label>
                    <select class="form-select" @bind="selectedElectionId">
                        @if (elections != null)
                        {
                            @foreach (var election in elections)
                            {
                                <option value="@election.Id">@election.Title</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <hr class="border-primary opacity-50" style="height: 2px">

        <!-- Summary Cards -->
        <div class="row g-4 mb-4">
            <div class="col-md-4">
                <div class="card border-primary shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded-circle">
                                <i class="bi bi-people-fill fs-4 text-primary"></i>
                            </div>
                            <div>
                                <div class="text-muted small">Total Votes Cast</div>
                                <div class="h4 mb-0">@TotalVotes.ToString("N0")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card border-success shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded-circle">
                                <i class="bi bi-check-circle-fill fs-4 text-success"></i>
                            </div>
                            <div>
                                <div class="text-muted small">National Turnout</div>

                                <div class="h4 mb-0">@($"{CalculatedTurnout:F1}%")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card border-warning shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded-circle">
                                <i class="bi bi-clock-history fs-4 text-warning"></i>
                            </div>
                            <div>
                                <div class="text-muted small">Next Update</div>
                                <div class="h4 mb-0">@refreshCountdown sec</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

         <!-- Position Tabs -->
        <div class="mb-4">
            <ul class="nav nav-tabs">
                @foreach (var position in Positions)
                {
                    var pos = position;
                    <li class="nav-item">
                        <button class="nav-link @(selectedPosition == pos ? "active" : "")" 
                                @onclick="() => SelectPosition(pos)">
                            <i class="bi bi-person-badge me-2"></i>@pos
                        </button>
                    </li>
                }
            </ul>
        </div>

         <!-- Detailed Results -->
        <div class="card mt-4 border-0 shadow-sm bg-secondary bg-opacity-10">
        <div class="card-body p-0">
            <div class="d-flex justify-content-between align-items-center p-4 border-bottom">
                <div class="bg-secondary bg-opacity-10 p-3 rounded-3">
                    <h5 class="card-title fw-bold mb-0">
                        <i class="bi bi-table me-2 text-primary"></i>Detailed Results - @selectedPosition
                    </h5>
                    <small class="text-muted">Showing @FilteredResults.Length candidates</small>
                </div>
                <button class="btn btn-primary btn-sm" @onclick="ExportCSV">
                    <i class="bi bi-file-earmark-spreadsheet me-1"></i>Export CSV
                </button>
            </div>
            
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="bg-secondary-subtle">
                        <tr>
                            <th scope="col" class="ps-4" style="width: 30%">Candidate</th>
                            <th scope="col" style="width: 25%">Party</th>
                            <th scope="col" class="text-end pe-4" style="width: 20%">Votes</th>
                            <th scope="col" class="text-end pe-4" style="width: 25%">Percentage</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var candidate in FilteredResults)                       {
            
                            <tr class="align-middle">
                                <td class="ps-4 py-3">
                                    <div class="d-flex align-items-center">
                                        <div class="flex-shrink-0">
                                            <div class="avatar-sm bg-primary bg-opacity-10 text-primary rounded-circle d-flex align-items-center justify-content-center">
                                                <i class="bi bi-person fs-5"></i>
                                            </div>
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <h6 class="mb-0">@candidate.CandidateName</h6>
                                            <small class="text-muted">@candidate.PositionName</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge rounded-pill py-2 px-3" style="background-color: @GetPartyColor(candidate.Party); color: white">
                                        <i class="bi bi-flag-fill me-1"></i>@candidate.Party
                                    </span>
                                </td>
                                <td class="text-end pe-4">
                                    <div class="fw-semibold">@candidate.TotalVotes.ToString("N0")</div>
                                    <small class="text-muted">votes</small>
                                </td>
                                <td class="text-end pe-4">
                                    <div class="progress" style="height: 6px">
                                        <div class="progress-bar" 
                                            style="width: @GetVotePercentageNumber(candidate.TotalVotes, candidate.PositionName)%; 
                                                    background-color: @GetPartyColor(candidate.Party)"></div>
                                    </div>
                                    <div class="fw-semibold mt-1">@GetVotePercentageNumber(candidate.TotalVotes, candidate.PositionName)</div>
                                </td>
                            </tr>
                    }
                 </tbody>
                </table>
            </div>

            @if (FilteredResults.Length == 0)
            {
                <div class="text-center py-5">
                    <i class="bi bi-info-circle fs-1 text-muted"></i>
                    <p class="mt-3 text-muted">No candidates found for this position</p>
                </div>
            }
        </div>      

        <!-- Main Content -->
        <div class="row g-4">
            <!-- Results Chart -->
            <div class="col-lg-8">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <ErrorBoundary>
                            <div class="chart-container">
                                @if (!isLoading && !errorOccurred && hasChartData)
                                {
                                    <canvas id="resultsChart"></canvas>
                                }
                                else
                                {
                                    <div class="text-muted text-center py-4">
                                        <i class="bi bi-bar-chart-line fs-3"></i>
                                        <p class="mt-2">@((hasChartData) ? "Loading chart..." : "No data available")</p>
                                    </div>
                                }
                            </div>
                        </ErrorBoundary>
                    </div>
                </div>
            </div>

            <!-- Leading Candidates -->
            <div class="col-lg-4 ">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h5 class="card-title fw-bold mb-0">Leading Candidates</h5>
                            <i class="bi bi-trophy-fill text-warning fs-5"></i>
                        </div>
                        <div class="list-group">
                            @foreach (var position in Positions)
                            {
                                var leader = results.Where(r => r.PositionName == position)
                                                  .OrderByDescending(r => r.TotalVotes)
                                                  .FirstOrDefault();
                                if (leader != null)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <div class="fw-bold small text-primary">@position</div>
                                                <div class="fw-bold mt-2">@leader.CandidateName</div>
                                                <div class="small text-muted">@leader.Party</div>
                                            </div>
                                            <div class="text-end">
                                                <div class="h5 mb-0">@leader.TotalVotes.ToString("N0")</div>
                                                <div class="small text-muted">
                                                    @GetVotePercentageNumber(leader.TotalVotes, position)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

       
     </div>
    }
</main>
@code {
    private bool isLoading = true;
    private bool errorOccurred;
    private string errorMessage = string.Empty;
    private ElectionResultsView[] results = Array.Empty<ElectionResultsView>();
    private Timer? refreshTimer;
    private Timer? countdownTimer;
    private int refreshCountdown = 30;
    private string selectedPosition = "President";
    private IJSObjectReference? chartModule;
    private IJSObjectReference? chartInstance;

    private IEnumerable<string> Positions => results.Select(r => r.PositionName).Distinct();
    private decimal TotalVotes => results.Where(r => r.PositionName == selectedPosition).Sum(r => r.TotalVotes);
    private decimal CalculatedTurnout => CalculateTurnout();
    private ElectionDetailsDto[]? elections;
    private Guid selectedElectionId = Guid.Empty;
    private decimal registeredVoters;
    private bool autoRefreshEnabled = true;

    private decimal GetVotePercentageNumber(decimal votes, string position)
    {
        var total = results.Where(r => r.PositionName == position).Sum(r => r.TotalVotes);
        return total > 0 ? votes / total * 100m : 0;
    }

    private decimal CalculateTurnout()
    {
        if (!results.Any() || registeredVoters == 0) return 0;
        var totalVotes = results.Where(r => r.PositionName == selectedPosition).Sum(r => r.TotalVotes);
        return (totalVotes / registeredVoters) * 100;
    }

    private bool hasChartData => results.Any() && Positions.Any();

    private ElectionResultsView[] FilteredResults => 
        results.Where(r => r.PositionName == selectedPosition)
               .OrderByDescending(r => r.TotalVotes)
               .ToArray();

    protected override async Task OnInitializedAsync()
    {
        elections = (await ElectionsService.GetElectionsAsync()).ToArray();
        if (elections?.Any() == true)
        {
            selectedElectionId = elections.First().Id;
            registeredVoters = 10; // TODO: Fetch actual voter count
        }
        await LoadData();
        SetupTimers();
    }

    private async Task LoadData()
    {
        try
        {
            if (selectedElectionId == Guid.Empty) return;
            isLoading = true;
            errorOccurred = false;
            var allResults = await ElectionsService.GetElectionsResultsAsync();
            results = allResults.Where(r => r.ElectionId == selectedElectionId).ToArray();            
            await UpdateChart();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            errorOccurred = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SetupTimers()
    {
        refreshTimer = new Timer(30000);
        refreshTimer.Elapsed += async (sender, e) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Start();

        countdownTimer = new Timer(1000);
        countdownTimer.Elapsed += (sender, e) => UpdateCountdown();
        countdownTimer.AutoReset = true;
        countdownTimer.Start();
    }

    private async Task RefreshData()
    {
        if (!autoRefreshEnabled) return;
        await InvokeAsync(async () =>
        {
            await LoadData();
            refreshCountdown = 30;
            StateHasChanged();
        });
    }

    private void ToggleAutoRefresh()
    {
        autoRefreshEnabled = !autoRefreshEnabled;
    }

    private void UpdateCountdown()
    {
        if (refreshCountdown > 0)
        {
            refreshCountdown--;
            InvokeAsync(StateHasChanged);
        }
    }

    private void SelectPosition(string position)
    {
        selectedPosition = position;
        InvokeAsync(StateHasChanged);
    }

    private async Task ExportCSV()
    {
        var csvContent = new StringBuilder();
        csvContent.AppendLine("Candidate,Party,Votes,Percentage");
        foreach (var item in FilteredResults)
        {


            var totalVotes = FilteredResults.Sum(x => x.TotalVotes);
            var percentage = totalVotes > 0 ? (item.TotalVotes * 100.0m) / totalVotes : 0;
            csvContent.AppendLine($"{item.CandidateName},{item.Party},{item.TotalVotes},{percentage:F2}");
        }
        var fileName = $"{selectedPosition.Replace(" ", "_")}_Results.csv";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, csvContent.ToString());

    }
    private async Task UpdateChart()
    {
        if (OperatingSystem.IsBrowser())
        {
            try
            {
                if (chartInstance != null)
                {
                    await chartModule.InvokeVoidAsync("destroyChart", chartInstance);
                    await chartInstance.DisposeAsync();
                    chartInstance = null;
                }
                var positionData = FilteredResults;
                if (positionData.Length == 0) return;

                chartModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/charts.js");
                chartInstance = await chartModule.InvokeAsync<IJSObjectReference>("createResultsChart", "resultsChart", new
                {
                    labels = positionData.Select(x => x.CandidateName).ToArray(),
                    data = positionData.Select(x => (decimal)x.TotalVotes).ToArray(),
                    colors = positionData.Select(x => GetPartyColor(x.Party)).ToArray()
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating chart: {ex.Message}");
                errorOccurred = true;
                errorMessage = "Failed to load chart visualization";
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

    private string GetPartyColor(string party) => party switch
    {
        "UDA" => "#FF0000",
        "ODM" => "#00FF00",
        "JUBILEE" => "#0000FF",
        _ => "#CCCCCC"
    };

    public async ValueTask DisposeAsync()
    {
        if (OperatingSystem.IsBrowser() && chartInstance != null)
        {
            try
            {
                if (chartModule != null)
                {
                    await chartModule.InvokeVoidAsync("destroyChart", chartInstance);
                }
                await chartInstance.DisposeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing chart: {ex.Message}");
            }
        }

        chartModule?.DisposeAsync().AsTask();
        refreshTimer?.Dispose();
        countdownTimer?.Dispose();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        countdownTimer?.Dispose();
    }
    
}
