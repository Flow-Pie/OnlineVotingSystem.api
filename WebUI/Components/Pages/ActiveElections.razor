@page "/active-elections"
@using OnlineVotingSystem.api.DTOs.User
@using OnlineVotingSystem.api.DTOs.Election
@using OnlineVotingSystem.api.DTOs.Position
@rendermode InteractiveServer

<main class="container mt-4 scrollable-container">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">Active Elections</h2>
        <div class="bg-primary-subtle rounded-circle p-3">
            <i class="bi bi-megaphone-fill fs-4 text-primary"></i>
        </div>
    </div>

        
 <!-- Search & Filter -->
    <div class="mb-4 d-flex gap-2">
        <input type="text" class="form-control" @bind="SearchTerm" 
               placeholder="Search elections...click the Search button to search">
        <button class="btn btn-primary" @onclick="FilterElections">
            <i class="bi bi-search"></i> Search
        </button>
    </div>

    @if (ElectionsModel == null)
    {
        <div class="d-flex justify-content-center my-5 py-5">
            <div class="spinner-grow text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!FilteredElections.Any())
    {
        <div class="alert alert-warning text-center py-4">
            <i class="bi bi-calendar-x fs-4 me-2"></i>
            No active elections found
        </div>
    }
    else
    {
        <div class="accordion" id="electionsAccordion">
            @foreach (var election in FilteredElections)
            {
                var electionKey = election.Id.ToString().Replace("-", "");
                <div class="accordion-item mb-3 shadow-sm">
                    <h2 class="accordion-header" id="heading-@electionKey">
                        <button class="accordion-button collapsed" type="button" 
                                data-bs-toggle="collapse" 
                                data-bs-target="#collapse-@electionKey">
                            <div class="d-flex w-100 justify-content-between pe-3">
                                <div>
                                    <h5 class="mb-1">@election.Title</h5>
                                    <small class="text-muted">
                                        @election.StartTime.ToString("MMM dd") - 
                                        @election.EndTime.ToString("MMM dd")
                                    </small>
                                </div>
                                <div class="badge bg-primary bg-opacity-10 text-primary">
                                    !Status
                                </div>
                            </div>
                        </button>
                    </h2>
                    
                    <div id="collapse-@electionKey" class="accordion-collapse collapse" 
                         data-bs-parent="#electionsAccordion">
                        <div class="accordion-body pt-0">
                            <!-- Election Details -->
                            <div class="row mt-4 mb-4">
                                <div class="col-md-8">
                                    <p class="text-secondary">@election.Description</p>
                                    
                                    <!-- Creator Info -->
                                    <div class="card border-0 bg-light mb-4">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center gap-3">
                                                <div class="bg-primary bg-opacity-10 p-3 rounded-circle">
                                                    <i class="bi bi-person-circle fs-4 text-primary"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">Created By</h6>
                                                    <p class="mb-0 fw-medium">
                                                        @GetCreatorName(election.CreatedBy)
                                                        <small class="text-muted d-block">
                                                            @GetCreatorEmail(election.CreatedBy)
                                                        </small>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Positions -->
                                    <h6 class="mb-3">Election Positions</h6>
                                    @if (ElectionPositions.TryGetValue(election.Id, out var positions))
                                    {
                                        <div class="row g-3">
                                            @foreach (var position in positions)
                                            {
                                                <div class="col-md-6">
                                                    <div class="card border-0 bg-light h-100">
                                                        <div class="card-body">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <div>
                                                                    <h6 class="mb-0">@position.Name</h6>
                                                                    <small class="text-muted">
                                                                        !Candidates.Count candidates
                                                                    </small>
                                                                </div>
                                                                <span class="badge bg-primary bg-opacity-25 text-primary">
                                                                     !seat(s)
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>


                                <!-- Action Panel -->
                                <div class="col-md-4">
                                    <div class="card border-0 bg-light h-100">
                                        <div class="card-body d-flex flex-column gap-3">
                                            <button class="btn btn-outline-primary w-100"
                                                    @onclick="() => ToggleDetails(election.Id)">
                                                <i class="bi bi-info-circle me-2"></i>
                                                @(ElectionDetailsState[election.Id] ? "Hide" : "Show") Details
                                            </button>
                                            <button class="btn btn-outline-danger w-100"
                                                    @onclick="() => ConfirmDeleteElection(election.Id)">
                                                <i class="bi bi-trash me-2"></i>
                                                Delete Election
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (ShowDeleteModal)
        {
            <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5)" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content border-0 shadow-lg">
                        <div class="modal-header border-0 pb-0">
                            <h5 class="modal-title">
                                <i class="bi bi-exclamation-octagon-fill text-danger me-2"></i>
                                Confirm Deletion
                            </h5>
                            <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                        </div>
                        <div class="modal-body">
                            <p class="lead">Are you sure you want to permanently delete this election?</p>
                            <p class="text-muted small">All associated data including votes and candidates will be removed.</p>
                        </div>
                        <div class="modal-footer border-0">
                            <button class="btn btn-link text-muted text-decoration-none" @onclick="CloseDeleteModal">
                                Cancel
                            </button>
                            <button class="btn btn-danger px-4" @onclick="() => DeleteElection(SelectedElectionId)">
                                <i class="bi bi-trash me-2"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</main>

<style>
    .scrollable-container {
        max-height: calc(100vh - 100px);
        overflow-y: auto;
    }

    .accordion-button:not(.collapsed) {
        background-color: var(--bs-primary-bg-subtle);
        color: var(--bs-primary);
    }

    .accordion-item {
        border-radius: 0.5rem !important;
        overflow: hidden;
    }
</style>


@code {
    [Inject]
    public required IElectionsService ElectionsService { get; set; }

    [Inject]
    public required IUsersService UsersService { get; set; }

    private Dictionary<Guid, string> UserNames = new();
    private Dictionary<Guid, string> UserEmails = new();
    public required List<ElectionDetailsDto> ElectionsModel { get; set; } = new();
    public required List<UserDetailsDto> UsersModel { get; set; } = new();
    private Dictionary<Guid, bool> ElectionDetailsState = new();
    private Dictionary<Guid, List<PositionDetails>> ElectionPositions = new();
    private Dictionary<Guid, string> PositionErrors = new();        
    private string SearchTerm { get; set; } = string.Empty;
    private List<ElectionDetailsDto> FilteredElections{get; set;} = new();

    private bool ShowDeleteModal = false;
    private Guid SelectedElectionId;
    private string? SuccessMessage;
    private string? ErrorMessage;

  protected override async Task OnInitializedAsync()
    {
        try
        {
            ElectionsModel = (await ElectionsService.GetElectionsAsync()).ToList();
            UsersModel = (await UsersService.GetUsersAsync()).ToList();

            // Initialize the filtered list with all elections
            FilteredElections = new List<ElectionDetailsDto>(ElectionsModel);

            foreach (var election in ElectionsModel)
            {
                ElectionDetailsState[election.Id] = false;
            }

            foreach (var user in UsersModel)
            {
                UserNames[user.Id] = user.Name;
                UserEmails[user.Id] = user.Email;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load data: {ex.Message}";
        }
    }
    private string GetCreatorName(Guid userId)
    {
        return UserNames.TryGetValue(userId, out var name) ? name : "Unknown";
    }

    private string GetCreatorEmail(Guid userId)
    {
        return UserEmails.TryGetValue(userId, out var email) ? email : "Unknown";
    }
    private void FilterElections()
{
    try
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredElections = new List<ElectionDetailsDto>(ElectionsModel);
        }
        else
        {
            FilteredElections = ElectionsModel
                .Where(e => e.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                              e.Description.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    catch (Exception ex)
    {
        ErrorMessage = $"An error occurred while filtering elections: {ex.Message}";
        SuccessMessage = null;
    }

    // Trigger UI refresh
    StateHasChanged();
}

    private async Task ToggleDetails(Guid electionId)
    {
        var currentState = ElectionDetailsState.GetValueOrDefault(electionId, false);
        ElectionDetailsState[electionId] = !currentState;

        if (!currentState && !ElectionPositions.ContainsKey(electionId))
        {
            try
            {
                var positions = await ElectionsService.GetElectionPositionsAsync(electionId);
                ElectionPositions[electionId] = positions.ToList();
                PositionErrors.Remove(electionId); 
            }
            catch (Exception ex)
            {
                PositionErrors[electionId] = $"Failed to load positions: {ex.Message}";
            }
        }
    }

    private async Task RefreshPositions(Guid electionId)
    {
        ElectionPositions.Remove(electionId);
        PositionErrors.Remove(electionId);
        await ToggleDetails(electionId); // Force reload
    }

    private void ConfirmDeleteElection(Guid electionId)
    {
        SelectedElectionId = electionId;
        ShowDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        ShowDeleteModal = false;
        SelectedElectionId = Guid.Empty;
    }

    private async Task DeleteElection(Guid electionId)
    {
        try
        {
            await ElectionsService.DeleteElectionAsync(electionId);
            ElectionsModel.RemoveAll(e => e.Id == electionId);
            ElectionPositions.Remove(electionId);
            PositionErrors.Remove(electionId); 
            SuccessMessage = "Election deleted successfully!";
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to delete election: {ex.Message}";
            SuccessMessage = null;
        }
        finally
        {
            CloseDeleteModal();
        }
    }
}