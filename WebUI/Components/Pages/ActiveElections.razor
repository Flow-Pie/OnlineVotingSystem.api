@page "/active-elections"
@using OnlineVotingSystem.api.DTOs.User
@using OnlineVotingSystem.api.DTOs.Election
@using OnlineVotingSystem.api.DTOs.Position
@using OnlineVotingSystem.api.DTOs.ElectionPosition
@using System.Net
@using System.Timers
@implements IDisposable
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<main class="container mt-4 scrollable-container">
    <style>
        .badge-status {
            font-size: 0.75rem;  
            padding: 0.25rem 0.5rem; 
            border-radius: 0.75rem; 
            font-weight: 500;
            display: inline-block; 
            min-width: auto; 
        }


        .badge-status-upcoming { 
            background-color: #0dcaf0 !important; 
            border: 1px solid #0dcaf0;
        }

        .badge-status-active { 
            background-color: #198754 !important;
            border: 1px solid #198754;
        } 

        .badge-status-ended { 
            background-color: #dc3545 !important;
            border: 1px solid #dc3545;
        }

        .scrollable-container {
            max-height: calc(100vh - 100px);
            overflow-y: auto;
        }

        .accordion-button:not(.collapsed) {
            background-color: var(--bs-primary-bg-subtle);
            color: var(--bs-primary);
        }

        .accordion-item {
            border-radius: 0.5rem !important;
            overflow: hidden;
        }

        .card {
            border: 1px solid rgba(0, 0, 0, 0.125);
            border-radius: 0.5rem;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .position-card {
            background-color: #ffffff;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 0.5rem;
            transition: background-color 0.2s ease;
        }

        .position-card:hover {
            background-color: #f8f9fa;
        }
    </style>

    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0 text-primary">Active Elections</h2>
        <div class="bg-primary-subtle rounded-circle p-3">
            <i class="bi bi-megaphone-fill fs-4 text-primary"></i>
        </div>
    </div>
    <hr class="border-primary opacity-50" style="height: 2px">

    <!-- Search & Filter -->
    <div class="mb-4 d-flex gap-2">
        <input type="text" class="form-control" @bind="SearchTerm" 
               placeholder="Search elections...">
        <button class="btn btn-primary" @onclick="FilterElections">
            <i class="bi bi-search"></i> Search
        </button>
    </div>

    @if (ElectionsModel == null)
    {
        <div class="d-flex justify-content-center my-5 py-5">
            <div class="spinner-grow text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!FilteredElections.Any())
    {
        <div class="alert alert-warning text-center py-4">
            <i class="bi bi-calendar-x fs-4 me-2"></i>
            No active elections found
        </div>
    }
    else
    {
        <div class="accordion" id="electionsAccordion">
            @foreach (var election in FilteredElections)
            {
                var electionKey = election.Id.ToString().Replace("-", "");
                <div class="accordion-item mb-3 shadow-sm">
                    <h2 class="accordion-header" id="heading-@electionKey">
                        <button class="accordion-button collapsed" type="button" 
                                data-bs-toggle="collapse" 
                                data-bs-target="#collapse-@electionKey">
                            <div class="d-flex w-100 justify-content-between pe-3">
                                <div>
                                    <h5 class="mb-1">@election.Title</h5>                                    
                                </div>
                                
                            </div>
                        </button>
                    </h2>
                    
                    <div id="collapse-@electionKey" class="accordion-collapse collapse" 
                         data-bs-parent="#electionsAccordion">
                        <div class="accordion-body pt-0">
                            <div class="row mt-4 mb-4">
                                <div class="col-md-8">
                                    <p class="text-secondary">
                                        @election.Description
                                        <span class="badge @GetStatusBadgeClass(election) text-white mx-1">
                                            @GetTimeRemaining(election).formattedTime
                                        </span> 
                                    </p>
                                
                                    
                                    <div class="card border-0 bg-light mb-4">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center gap-3">
                                                <div class="bg-primary bg-opacity-10 p-3 rounded-circle">
                                                    <i class="bi bi-person-circle fs-4 text-primary"></i>
                                                </div>                                                
                                                <div>
                                                    <h6 class="mb-1">Created By</h6>
                                                    <p class="mb-0 fw-medium">
                                                        @GetCreatorName(election.CreatedBy)
                                                        <small class="text-muted d-block">
                                                            @GetCreatorEmail(election.CreatedBy)
                                                        </small>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    @if (ElectionDetailsState[election.Id])
                                    {
                                        <h6 class="mb-3">Election Positions</h6>
                                        @if (ElectionPositions.TryGetValue(election.Id, out var positions))
                                        {
                                            <div class="row g-3">
                                                @foreach (var position in positions)
                                                {
                                                    <div class="col-md-6">
                                                        <div class="card position-card h-100">
                                                            <div class="card-body">
                                                                <div class="d-flex justify-content-between align-items-center">
                                                                    <div>
                                                                        <h6 class="mb-0">@position.Position</h6>
                                                                        <small class="text-muted">
                                                                            !Count candidates
                                                                        </small>
                                                                    </div>
                                                                    <span class="badge bg-primary bg-opacity-25 text-primary">
                                                                        !seat(s)
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else if (PositionErrors.TryGetValue(election.Id, out var error))
                                        {
                                            <div class="alert alert-danger">@error</div>
                                        }
                                        else
                                        {
                                            <div class="text-center py-3">
                                                <div class="spinner-border text-primary" role="status">
                                                    <span class="visually-hidden">Loading positions...</span>
                                                </div>
                                            </div>
                                        }                                        
                                    }
                                </div>

                                <div class="col-md-4">
                                    <div class="card border-0 bg-light h-100">
                                        <div class="card-body d-flex flex-column gap-3">
                                            <button class="btn btn-outline-primary w-100"
                                                    @onclick="() => ToggleDetails(election.Id)">
                                                <i class="bi bi-info-circle me-2"></i>
                                                @(ElectionDetailsState[election.Id] ? "Hide" : "Show") Details
                                            </button>
                                            <button class="btn btn-outline-danger w-100"
                                                    @onclick="() => ConfirmDeleteElection(election.Id)">
                                                <i class="bi bi-trash me-2"></i>
                                                Delete Election
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>                
            }
        </div>

        @if (ShowDeleteModal)
        {
            <div class="modal @(ShowDeleteModal ? "show d-block" : "d-none")" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Delete Election</h5>
                            <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this election?</p>
                            @if (IsDeleting)
                            {
                                <div class="alert alert-info">
                                    <div class="spinner-border spinner-border-sm" role="status"></div>
                                    Deleting election...
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(DeleteError))
                            {
                                <div class="alert alert-danger">
                                    <i class="bi bi-exclamation-triangle-fill"></i> @DeleteError
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" 
                                    @onclick="CloseDeleteModal" 
                                    disabled="@IsDeleting">
                                Cancel
                            </button>
                            <button type="button" class="btn btn-danger" 
                                    @onclick="() => DeleteElection(SelectedElectionId)"
                                    disabled="@IsDeleting">
                                @if (IsDeleting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span>Deleting...</span>
                                }
                                else
                                {
                                    <span>Confirm Delete</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</main>

@code {
    [Inject] public required IElectionsService ElectionsService { get; set; }
    [Inject] public required IUsersService UsersService { get; set; }
    [Inject] public required IPositionsService PositionsService { get; set; }
    [Inject] public required IAuthService AuthService { get; set; }

    private Dictionary<Guid, string> UserNames = new();
    private Dictionary<Guid, string> UserEmails = new();
    private List<ElectionDetailsDto> ElectionsModel = new();
    private List<UserDetailsDto> UsersModel = new();
    private Dictionary<Guid, bool> ElectionDetailsState = new();
    private Dictionary<Guid, List<ElectionPositionSerialized>> ElectionPositions = new();
    private Dictionary<Guid, string> PositionErrors = new();
    private string SearchTerm = string.Empty;
    private List<ElectionDetailsDto> FilteredElections = new();

    private bool ShowDeleteModal = false;
    private Guid SelectedElectionId;
    private bool IsDeleting = false;
    private string? DeleteError;

    private Timer? _electionTimer;
    private DateTime _currentTime = DateTime.UtcNow;

    protected override async Task OnInitializedAsync()
    {
        _electionTimer = new Timer(1000);
        _electionTimer.Elapsed += (sender, e) => 
        {
            _currentTime = DateTime.UtcNow;
            InvokeAsync(StateHasChanged);
        };
        _electionTimer.Start();

        try
        {
            ElectionsModel = (await ElectionsService.GetElectionsAsync()).ToList();
            UsersModel = (await UsersService.GetUsersAsync()).ToList();
            FilteredElections = new List<ElectionDetailsDto>(ElectionsModel);

            foreach (var election in ElectionsModel)
            {
                ElectionDetailsState[election.Id] = false;
            }

            foreach (var user in UsersModel)
            {
                UserNames[user.Id] = user.Name;
                UserEmails[user.Id] = user.Email;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialization error: {ex.Message}");
        }
    }

    private string GetCreatorName(Guid userId) => 
        UserNames.TryGetValue(userId, out var name) ? name : "Unknown";

    private string GetCreatorEmail(Guid userId) => 
        UserEmails.TryGetValue(userId, out var email) ? email : "Unknown";

    private void FilterElections()
    {
        try
        {
            FilteredElections = string.IsNullOrWhiteSpace(SearchTerm)
                ? new List<ElectionDetailsDto>(ElectionsModel)
                : ElectionsModel.Where(e => 
                    e.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    e.Description.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
                  .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Filter error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task ToggleDetails(Guid electionId)
    {
        var currentState = ElectionDetailsState.GetValueOrDefault(electionId, false);
        ElectionDetailsState[electionId] = !currentState;

        if (!currentState && !ElectionPositions.ContainsKey(electionId))
        {
            try
            {
                PositionErrors.Remove(electionId);
                var positions = (await ElectionsService.GetElectionPositionsAsync(electionId)).ToList();
                ElectionPositions[electionId] = positions;
            }
            catch (Exception ex)
            {
                PositionErrors[electionId] = $"Failed to load positions: {ex.Message}";
            }
            StateHasChanged();
        }
    }

    private void ConfirmDeleteElection(Guid electionId)
    {
        SelectedElectionId = electionId;
        ShowDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        ShowDeleteModal = false;
        SelectedElectionId = Guid.Empty;
        DeleteError = null;
    }

    private async Task DeleteElection(Guid electionId)
    {
        IsDeleting = true;
        DeleteError = null;
        
        try
        {
            var token = await AuthService.GetTokenAsync();

            if (string.IsNullOrEmpty(token))
            {
                DeleteError = "Authentication required. Please login again.";
                return;
            }

            var success = await ElectionsService.DeleteElectionAsync(electionId, token);
            
            if (success)
            {
                ElectionsModel.RemoveAll(e => e.Id == electionId);
                FilteredElections = new List<ElectionDetailsDto>(ElectionsModel);
                ElectionPositions.Remove(electionId);
                PositionErrors.Remove(electionId);
                CloseDeleteModal();
            }
            else
            {
                DeleteError = "Failed to delete election. Please try again.";
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized)
        {
            DeleteError = "You don't have permission to delete elections";
        }
        catch (Exception ex)
        {
            DeleteError = $"Error: {ex.Message}";
        }
        finally
        {
            IsDeleting = false;
            StateHasChanged();
        }
    }

    private (string formattedTime, ElectionStatus status) GetTimeRemaining(ElectionDetailsDto election)
    {
        // Hardcoded test values
        var now = DateTime.UtcNow; 
        var startTime = now.AddHours(1); 
        var endTime = now.AddHours(3);

        // Uncomment these lines to test different scenarios:
        // Scenario 1: Election is upcoming
        //    startTime = now.AddHours(2);
         //   endTime = now.AddHours(4);

        // Scenario 2: Election is active
        //startTime = now.AddHours(-1);
        //endTime = now.AddHours(2);

        // Scenario 3: Election has ended
        //startTime = now.AddHours(-3);
       // endTime = now.AddHours(-1);

       //scenario 4: real election
        startTime = election.StartTime;
        endTime = election.EndTime;

        var startDiff = startTime - now;
        var endDiff = endTime - now;

        if (startDiff.TotalSeconds > 0)
        {
            return ($"Starts in {FormatTimeSpan(startDiff)}", ElectionStatus.Upcoming);
        }

        if (endDiff.TotalSeconds > 0)
        {
            return ($"{FormatTimeSpan(endDiff)} remaining", ElectionStatus.Active);
        }

        return ("Ended", ElectionStatus.Ended);
    }

    private string FormatTimeSpan(TimeSpan span) => 
        $"{(int)span.TotalDays}d {span.Hours}h {span.Minutes}m {span.Seconds}s";

    private string GetStatusBadgeClass(ElectionDetailsDto election) =>
        GetTimeRemaining(election).status switch
        {
            ElectionStatus.Upcoming => "badge-status-upcoming",
            ElectionStatus.Active => "badge-status-active",
            ElectionStatus.Ended => "badge-status-ended",
            _ => "badge bg-primary bg-opacity-10 text-primary"
        };

    private enum ElectionStatus { Upcoming, Active, Ended }

    public void Dispose()
    {
        _electionTimer?.Dispose();
        GC.SuppressFinalize(this);
    }
}