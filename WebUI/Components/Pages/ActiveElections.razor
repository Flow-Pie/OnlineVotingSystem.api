@page "/active-elections"
@using OnlineVotingSystem.api.DTOs
@using OnlineVotingSystem.api.DTOs.Election
@rendermode InteractiveServer

<main class="container mt-4">
    <h2 class="fw-bold mb-3">Active Elections</h2>

    @if (ElectionsModel == null)
    {
        <div class="alert alert-info text-center">Loading elections...</div>
    }
    else if (ElectionsModel.Count == 0)
    {
        <div class="alert alert-warning text-center">No active elections at the moment.</div>
    }
    else
    {
        <div class="row">
            @foreach (var election in ElectionsModel)
            {
                <div class="col-md-6">
                    <div class="card shadow mb-4">
                        <div class="card-body">
                            <h5 class="fw-bold">@election.Title</h5>
                            <p><strong>Start Date:</strong> @election.StartTime.ToShortDateString()</p>
                            <p><strong>End Date:</strong> @election.EndTime.ToShortDateString()</p>
                            <p><strong>Description:</strong> @string.Join(", ", election.Description)</p>
                            <p><strong>Total Candidates:</strong> TODO!! </p>
                            <p><strong>Total Voters:</strong> TODO!! </p>
                            
                            <button class="btn btn-primary btn-sm"
                               @onclick="() => ToggleDetails(election.Id)">
                                <i class="bi bi-eye"></i>
                                @(ElectionDetailsState.GetValueOrDefault(election.Id, false) ? "Hide Details" : "View Details")
                            </button>

                            @if (ElectionDetailsState.GetValueOrDefault(election.Id, false))
                            {
                                <div class="mt-3 p-2 bg-primary text-black">
                                    <p><strong>Created By:</strong> @GetCreatorName(election.CreatedBy)</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</main>

@code {
    [Inject]
    public required IElectionsService ElectionsService { get; set;}
    [Inject]
    public required IUsersService UsersService { get; set; }

    private Dictionary<Guid, string> UserNames = new();
    public required List<ElectionDetailsDto> ElectionsModel { get; set; }
    
    private Dictionary<Guid, bool> ElectionDetailsState = new();

    protected override async Task OnInitializedAsync()
    {
        ElectionsModel = (await ElectionsService.GetElectionsAsync()).ToList();
        
        foreach (var election in ElectionsModel)
        {
            ElectionDetailsState[election.Id] = false;
        }

        var userIds = ElectionsModel.Select(e => e.CreatedBy).Distinct();
        var fetchTasks = userIds.Select(FetchUserAndStoreNameAsync);
        await Task.WhenAll(fetchTasks);
    }

    private async Task FetchUserAndStoreNameAsync(Guid userId)
    {
        try
        {
            var user = await UsersService.GetUserByIdAsync(userId);
            UserNames[userId] = user?.Name ?? "Unknown";
        }
        catch
        {
            UserNames[userId] = "Error";
        }
    }

    
    private void ToggleDetails(Guid electionId)
    {
        ElectionDetailsState[electionId] = !ElectionDetailsState.GetValueOrDefault(electionId, false);
    }

    private string GetCreatorName(Guid userId)
    {
        return UserNames.TryGetValue(userId, out var name) ? name : "Unknown";
    }
}
