@* @page "/login" *@
@* @using System.Text.Json *@
@* @using Microsoft.AspNetCore.Components.Authorization *@
@* @using OnlineVotingSystem.api.DTOs *@
@* @using WebUI.Services *@
@* @inject IAuthService AuthService *@
@* @inject AuthenticationStateProvider AuthStateProvider *@
@* @inject NavigationManager NavigationManager *@
@* @inject IJSRuntime JS *@
@* *@
@* <PageTitle>Login - Online Voting System</PageTitle> *@
@* *@
@* <div class="login-container"> *@
@*     <div class="login-card"> *@
@*         <h3 class="text-center mb-4">User Login</h3> *@
@* *@
@*         <EditForm Model="@loginRequest" OnValidSubmit="@LoginUser" FormName="loginForm"> *@
@*             <DataAnnotationsValidator /> *@
@* *@
@*             <div class="form-group"> *@
@*                 <label for="identifier">National ID/Email:</label> *@
@*                 <InputText id="identifier" *@
@*                            class="form-control" *@
@*                            @bind-Value="loginRequest.Identifier" /> *@
@*                 <ValidationMessage For="@(() => loginRequest.Identifier)" /> *@
@*             </div> *@
@* *@
@*             <div class="form-group"> *@
@*                 <label for="password">Password:</label> *@
@*                 <InputText id="password" *@
@*                            type="password" *@
@*                            class="form-control" *@
@*                            @bind-Value="loginRequest.Password" /> *@
@*                 <ValidationMessage For="@(() => loginRequest.Password)" /> *@
@*             </div> *@
@* *@
@*             <div class="form-group text-center"> *@
@*                 <button type="submit" class="btn btn-primary btn-block" disabled="@isLoading"> *@
@*                     @if (isLoading) *@
@*                     { *@
@*                         <span class="spinner-border spinner-border-sm" role="status"></span> *@
@*                     } *@
@*                     Login *@
@*                 </button> *@
@*             </div> *@
@*         </EditForm> *@
@* *@
@*         @if (!string.IsNullOrEmpty(error)) *@
@*         { *@
@*             <div class="alert alert-danger mt-3"> *@
@*                 @error *@
@*             </div> *@
@*         } *@
@* *@
@*         <div class="text-center mt-3"> *@
@*             <a href="/register" class="text-muted">Create new account</a> | *@
@*             <a href="/forgot-password" class="text-muted">Forgot password?</a> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
@* *@
@* @code { *@
@*     private LoginUserDto loginRequest = new LoginUserDto(); *@
@*     private string error = string.Empty; *@
@*     private bool isLoading = false; *@
@* *@
@*     private async Task LoginUser() *@
@*     { *@
@*         error = string.Empty; *@
@*         isLoading = true; *@
@* *@
@*         try *@
@*         { *@
@*             var loginResponse = await AuthService.LoginAsync(loginRequest); *@
@* *@
@*             // Save token and update auth state *@
@*             var customAuthProvider = (CustomAuthStateProvider)AuthStateProvider; *@
@*             await customAuthProvider.NotifyUserAuthentication(loginResponse.AccessToken); *@
@* *@
@*             // Save user details to local storage *@
@*             await JS.InvokeVoidAsync("localStorage.setItem", "userDetails", *@
@*                 JsonSerializer.Serialize(loginResponse.User)); *@
@* *@
@*             // Redirect to home *@
@*             NavigationManager.NavigateTo("/", true); *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             error = ex switch *@
@*             { *@
@*                 HttpRequestException => "Login failed: Invalid credentials or network error", *@
@*                 _ => "An unexpected error occurred" *@
@*             }; *@
@* *@
@*             Console.WriteLine($"Login error: {ex.Message}"); *@
@*         } *@
@*         finally *@
@*         { *@
@*             isLoading = false; *@
@*             StateHasChanged(); *@
@*         } *@
@*     } *@
@* } *@
@* *@
@* <style> *@
@*     .login-container { *@
@*         display: flex; *@
@*         justify-content: center; *@
@*         align-items: center; *@
@*         min-height: 100vh; *@
@*         background-color: #f8f9fa; *@
@*     } *@
@* *@
@*     .login-card { *@
@*         background: white; *@
@*         padding: 2rem; *@
@*         border-radius: 8px; *@
@*         box-shadow: 0 2px 4px rgba(0,0,0,0.1); *@
@*         width: 100%; *@
@*         max-width: 400px; *@
@*     } *@
@* *@
@*     .btn-block { *@
@*         width: 100%; *@
@*     } *@
@* *@
@*     .spinner-border { *@
@*         margin-right: 8px; *@
@*     } *@
@* </style> *@