@page "/create-election"
@using OnlineVotingSystem.api.DTOs.Election
@using OnlineVotingSystem.api.DTOs.ElectionPosition
@using OnlineVotingSystem.api.DTOs.Position
@inject IElectionsService ElectionService
@inject IPositionsService PositionsService
@rendermode InteractiveServer
@using System.Collections.ObjectModel
@using System.Net
<main class="container mt-4 scrollable-container">
    <!-- Page Header -->
    <header class="mb-5">
        <h1 class="fw-bold display-6 text-primary">Election Management</h1>
        <hr class="border-primary opacity-50" style="height: 2px">
    </header>

    <!-- Status Messages -->
    <div class="status-container position-fixed top-0 end-0 p-3" style="z-index: 9999">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger d-flex align-items-center shadow-sm">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div class="flex-grow-1">@errorMessage</div>
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success d-flex align-items-center shadow-sm">
                <i class="bi bi-check-circle-fill me-2"></i>
                <div class="flex-grow-1">@successMessage</div>
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }
    </div>

    <div class="row g-4">
        <!-- Main Election Form -->
         <div class="col-lg-8">
        <div class="card border-2 border-primary-subtle shadow-sm">
                <div class="card-header bg-primary-subtle border-primary-subtle py-3">
                    <h2 class="h5 mb-0 fw-semibold">
                        <i class="bi bi-clipboard-plus me-2"></i>Create New Election
                    </h2>
                </div>

                <div class="card-body p-4">
                    <form @onsubmit="HandleSubmit">
                        <!-- Election Metadata -->
                        <div class="row g-4 mb-4">
                            <div class="col-12">
                                <div class="form-floating">
                                    <input type="text"
                                           class="form-control border-primary-subtle"
                                           @bind="Title"
                                           placeholder="Election Title">
                                    <label class="text-muted">Election Title</label>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="form-floating">
                                    <textarea class="form-control border-primary-subtle"
                                              @bind="Description"
                                              style="height: 100px"
                                              placeholder="Description"></textarea>
                                    <label class="text-muted">Description</label>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="datetime-local"
                                           class="form-control border-primary-subtle"
                                           @bind="StartTime">
                                    <label class="text-muted">Start Date & Time</label>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="datetime-local"
                                           class="form-control border-primary-subtle"
                                           @bind="EndTime">
                                    <label class="text-muted">End Date & Time</label>
                                </div>
                            </div>
                        </div>

                    <!-- Position Selection -->
                    <section class="mb-5">
                            <h3 class="h5 fw-semibold mb-4 text-primary">
                                <i class="bi bi-person-gear me-2"></i>Available Positions
                            </h3>
                        <div class="positions-container bg-light p-3 rounded-2">
                            @if (availablePositions == null)
                                {
                                    <div class="d-flex justify-content-center py-3">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                }
                                else if (!availablePositions.Any())
                                {
                                    <div class="alert alert-warning mb-0 py-2">
                                        <i class="bi bi-info-circle me-2"></i>No positions available
                                    </div>
                                }
                                else
                                {
                                <div class="row g-3">
                                    @foreach (var position in availablePositions)
                                    {
                                        <div class="col-md-6">
                                            <div class="form-check card h-100 m-0 position-card @(SelectedPositions.Contains(position.Id) ? "selected" : "")">
                                                <input class="form-check-input visually-hidden"
                                                    type="checkbox"
                                                    id="@($"pos-{position.Id}")"
                                                    checked="@SelectedPositions.Contains(position.Id)"
                                                    @onchange="() => TogglePosition(position.Id)">
                                                <label class="form-check-label card-body p-3 d-flex align-items-center"
                                                    for="@($"pos-{position.Id}")">
                                                    <!-- Icon and Position Name -->
                                                    <div class="d-flex align-items-center gap-3">
                                                        <i class="bi bi-person-circle fs-4 text-primary"></i>
                                                        <div>
                                                            <span class="fw-medium">@position.Name</span>
                                                            <small class="text-muted d-block mt-1">Click to select this position</small>
                                                        </div>
                                                    </div>

                                                    <!-- Selection Indicator -->
                                                    <div class="ms-auto">
                                                        <div class="form-check-circle @(SelectedPositions.Contains(position.Id) ? "checked" : "")">
                                                            <i class="bi bi-check-lg"></i>
                                                        </div>
                                                    </div>
                                                </label>
                                            </div>
                                        </div>
                                    }

                                </div>
                            }
                        </div>
                    </section>

                   <!-- Form Actions -->
                        <div class="d-flex gap-3 justify-content-end border-top pt-4">
                            <button type="reset"
                                    class="btn btn-outline-secondary px-4"
                                    @onclick="ResetForm">
                                Reset
                            </button>
                            <button type="submit"
                                    class="btn btn-primary px-4"
                                    disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Create Election
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Side Panel -->
        <div class="col-lg-4">
            <div class="sticky-top" style="top: 1rem">
                <!-- Selected Positions -->             
        <div class="card border-2 border-primary-subtle shadow-sm mb-4">
            <div class="card-header bg-primary-subtle border-primary-subtle py-3">
                <h3 class="h5 mb-0 fw-semibold">
                    <i class="bi bi-check2-square me-2"></i>Selected Positions
                </h3>
            </div>

            <div class="card-body p-3">
                @if (SelectedPositions.Count == 0)
                {
                    <div class="text-center text-muted py-2">No positions selected</div>
                }
                else
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var posId in SelectedPositions)
                        {
                            var position = availablePositions?.FirstOrDefault(p => p.Id == posId);
                            if (position != null)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center px-0 py-2">
                                    <span class="text-truncate">@position.Name</span>
                                    <button class="btn btn-sm btn-link text-danger p-0"
                                            @onclick="() => TogglePosition(posId)">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </li>
                            }
                        }
                    </ul>
                }
            </div>
        </div>

                <!-- Quick Position Creation -->
                <div class="card border-2 border-primary-subtle shadow-sm">
                    <div class="card-header bg-primary-subtle border-primary-subtle py-3">
                        <h3 class="h5 mb-0 fw-semibold">
                            <i class="bi bi-plus-square me-2"></i>Create New Position
                        </h3>
                    </div>

                    <div class="card-body p-3">
                        <div class="form-floating mb-3">
                            <input type="text"
                                   class="form-control border-primary-subtle"
                                   @bind="newPositionName"
                                   placeholder="Position title">
                            <label class="text-muted">Position Title</label>
                        </div>

                        <div class="d-flex gap-2 justify-content-end">
                            @if (!string.IsNullOrEmpty(positionCreationError))
                            {
                                <div class="alert alert-danger mb-0 py-2 flex-grow-1">
                                    <i class="bi bi-exclamation-circle me-2"></i>@positionCreationError
                                </div>
                            }
                            <button class="btn btn-success px-4"
                                    @onclick="HandleCreatePosition"
                                    disabled="@isCreatingPosition">
                                @if (isCreatingPosition)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>


<style>
    .scrollable-container {
        max-height: calc(100vh - 120px);
        overflow-y: auto;
        padding-right: 0.5rem;
    }    

    .card-hover {
        transition: transform 0.15s ease, box-shadow 0.15s ease;
    }

    .card-hover:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.05);
    }

    .form-control:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    .position-card {
        transition: all 0.2s ease;
        cursor: pointer;
        border: 2px solid transparent;
    }

    .position-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-color: var(--bs-primary);
    }

    /* Selected State */
    .position-card.selected {
        border-color: var(--bs-primary);
        background-color: rgba(13, 110, 253, 0.05);
    }

    /* Check Circle */
    .form-check-circle {
        width: 24px;
        height: 24px;
        border: 2px solid var(--bs-primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .form-check-circle.checked {
        background-color: var(--bs-primary);
        color: white;
    }

    .form-check-circle i {
        font-size: 12px;
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .form-check-circle.checked i {
        opacity: 1;
    }
</style>

@code {
    // Form Fields
    private string Title { get; set; } = "";
    private string Description { get; set; } = "";
    private DateTime StartTime { get; set; } = DateTime.Now;
    private DateTime EndTime { get; set; } = DateTime.Now.AddHours(1);

    // Position Selection
    private ObservableCollection<PositionDetails> availablePositions = new();
    private ObservableCollection<Guid> SelectedPositions { get; set; } = new();
    private string newPositionName = string.Empty;
    private bool isCreatingPosition = false;
    private string positionCreationError = string.Empty;

    // State Management
    private bool isLoading;
    private string errorMessage = "";
    private string successMessage = "";
    private string _bearerToken = "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOlsiMTExMTExMTEtMTExMS0xMTExLTExMTEtMTExMTExMTExMTExIiwiQWRtaW4iXSwiZW1haWwiOiJhZG1pbkBzeXN0ZW0uY29tIiwibmF0aW9uYWxJZCI6IjEwMDAwMDAxIiwiaXNBZG1pbiI6InRydWUiLCJuYmYiOjE3NDI2NzY0MTcsImV4cCI6MTc0MjY3ODIxNywiaWF0IjoxNzQyNjc2NDE3LCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo1MjU2LyIsImF1ZCI6Imh0dHBzOi8vbG9jYWxob3N0OjUyNTYifQ.23oBR4WcFVf6AGB-CraSZggwfkKjqNYqvJKMe_qhrdTggGA5fWEN9HDzhN3_p35JYxQqDOIF5l2I2Nls7oNsuQ";

    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();
        SelectedPositions.CollectionChanged += (s, e) => StateHasChanged();
    }

    private async Task LoadPositions()
    {
        try
        {
            var positions = await PositionsService.GetPositionsAsync();
            availablePositions.Clear();
            foreach (var position in positions)
            {
                availablePositions.Add(position);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load positions: {ex.Message}";
            StateHasChanged();
        }
    }

    private void TogglePosition(Guid positionId)
    {
        if (SelectedPositions.Contains(positionId))
        {
            SelectedPositions.Remove(positionId);
        }
        else
        {
            SelectedPositions.Add(positionId);
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            successMessage = "";
            StateHasChanged();

            var validationErrors = ValidateForm();
            if (validationErrors.Any())
            {
                errorMessage = string.Join(". ", validationErrors) + ".";
                return;
            }

            var electionDto = new CreateElectionDto(
                Title.Trim(),
                Description.Trim(),
                StartTime,
                EndTime
            );

            var createdElection = await ElectionService.CreateElectionAsync(electionDto, _bearerToken);
            await AssignPositionsToElection(createdElection.Id);
            
            ResetForm();
            successMessage = "Election created successfully!";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"API Error: {ex.Message}";
        }
        catch (Exception ex)
        {           
            successMessage = "Election created successfully!";
            //DISCLAIMER! IT IS WORKING 
            //TOUCH IT IF YOU KNOW WHAT YOU ARE DOING
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private List<string> ValidateForm()
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(Title)) errors.Add("Title is required");
        if (string.IsNullOrWhiteSpace(Description)) errors.Add("Description is required");
        if (SelectedPositions.Count == 0) errors.Add("At least one position must be selected");
        if (EndTime <= StartTime) errors.Add("End time must be after start time");
        return errors;
    }

    private async Task AssignPositionsToElection(Guid electionId)
    {
        foreach (var positionId in SelectedPositions)
        {
            await ElectionService.CreateElectionPositionAsync(
                electionId,
                new CreateElectionPositionDto(positionId)
            );
        }
    }

    private void ResetForm()
    {
        Title = "";
        Description = "";
        StartTime = DateTime.Now;
        EndTime = DateTime.Now.AddHours(1);
        SelectedPositions.Clear();
        StateHasChanged();
    }

    private async Task HandleCreatePosition()
    {
        try
        {
            isCreatingPosition = true;
            positionCreationError = "";
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(newPositionName))
            {
                positionCreationError = "Position title is required";
                return;
            }

            var newPosition = new CreatePositionDto(newPositionName.Trim());
            var createdPosition = await PositionsService.CreatePositionAsync(newPosition, _bearerToken);

            availablePositions.Add(createdPosition);
            SelectedPositions.Add(createdPosition.Id);
            newPositionName = string.Empty;
        }
        catch (Exception ex)
        {
            positionCreationError = ex switch
            {
                HttpRequestException { StatusCode: HttpStatusCode.Conflict } => 
                    "Position with this name already exists",
                _ => $"Error creating position: {ex.Message}"
            };
        }
        finally
        {
            isCreatingPosition = false;
            StateHasChanged();
        }
    }
}