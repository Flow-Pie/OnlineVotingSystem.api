@page "/create-election"
@using OnlineVotingSystem.api.DTOs.Election
@using OnlineVotingSystem.api.DTOs.ElectionPosition
@using OnlineVotingSystem.api.DTOs.Position
@inject IElectionsService ElectionService
@inject IPositionsService PositionsService
@rendermode InteractiveServer
@using System.Collections.ObjectModel
@using System.Net
<main class="container mt-4 scrollable-container">
    <style>
    :root {
            /* Enterprise Theme Variables */
            --enterprise-primary: #2A5C8D;
            --enterprise-secondary: #5F7D95;
            --enterprise-accent: #48A3C6;
            --enterprise-success: #3A9D85;
            --enterprise-border: #EBEFF2;
            --enterprise-chart-bg: rgba(245, 248, 250, 0.9);

            /* Bootstrap Overrides */
            --bs-primary: var(--enterprise-primary);
            --bs-secondary: var(--enterprise-secondary);
            --bs-success: var(--enterprise-success);
            --bs-info: var(--enterprise-accent);
            --bs-border-color: var(--enterprise-border);
            --bs-link-color: var(--enterprise-accent);
            --bs-link-hover-color: var(--enterprise-primary);
        }

        .scrollable-container {
            max-height: calc(100vh - 120px);
            overflow-y: auto;
            padding-right: 0.5rem;
        }

        .card {
            border: 2px solid var(--enterprise-border);
            transition: transform 0.15s ease, box-shadow 0.15s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.25rem 0.75rem rgba(42, 92, 141, 0.05);
        }

        .form-control:focus {
            border-color: var(--enterprise-accent);
            box-shadow: 0 0 0 0.25rem rgba(72, 163, 198, 0.25);
        }

        .position-card {
            border: 2px solid transparent;
            transition: all 0.2s ease;
        }

        .position-card:hover,
        .position-card.selected {
            border-color: var(--enterprise-primary);
            background-color: var(--enterprise-chart-bg);
        }

        .form-check-circle {
            border-color: var(--enterprise-primary);
        }

        .form-check-circle.checked {
            background-color: var(--enterprise-primary);
        }

        .bg-primary-subtle {
            background-color: rgba(42, 92, 141, 0.1) !important;
        }

        .border-primary-subtle {
            border-color: rgba(42, 92, 141, 0.15) !important;
        }

        .alert-success {
            background-color: rgba(58, 157, 133, 0.15);
            border-color: var(--enterprise-success);
            color: var(--enterprise-success);
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.15);
            border-color: #dc3545;
            color: #dc3545;
        }
    </style>
    <header class="mb-5">
        <h1 class="fw-bold display-6 text-primary">Election Management</h1>
        <hr class="border-primary opacity-50" style="height: 2px">
    </header>

    <div class="status-container position-fixed top-0 p-3" style="z-index: 9999">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger d-flex align-items-center shadow-sm">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div class="flex-grow-1">@errorMessage</div>
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success d-flex align-items-center shadow-sm">
                <i class="bi bi-check-circle-fill me-2"></i>
                <div class="flex-grow-1">@successMessage</div>
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }
    </div>

    <div class="row g-4">
         <div class="col-lg-8">
        <div class="card border-2 border-primary-subtle shadow-sm">
                <div class="card-header bg-primary-subtle border-primary-subtle py-3">
                    <h2 class="h5 mb-0 fw-semibold">
                        <i class="bi bi-clipboard-plus me-2"></i>Create New Election
                    </h2>
                </div>

                <div class="card-body p-4">
                    <form @onsubmit="HandleSubmit">
                        <div class="row g-4 mb-4">
                            <div class="col-12">
                                <div class="form-floating">
                                    <input type="text"
                                           class="form-control border-primary-subtle"
                                           @bind="Title"
                                           placeholder="Election Title">
                                    <label class="text-muted">Election Title</label>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="form-floating">
                                    <textarea class="form-control border-primary-subtle"
                                              @bind="Description"
                                              style="height: 100px"
                                              placeholder="Description"></textarea>
                                    <label class="text-muted">Description</label>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="datetime-local"
                                           class="form-control border-primary-subtle"
                                           @bind="StartTime">
                                    <label class="text-muted">Start Date & Time</label>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="datetime-local"
                                           class="form-control border-primary-subtle"
                                           @bind="EndTime">
                                    <label class="text-muted">End Date & Time</label>
                                </div>
                            </div>
                        </div>

                    <section class="mb-5">
                            <h3 class="h5 fw-semibold mb-4 text-primary">
                                <i class="bi bi-person-gear me-2"></i>Available Positions
                            </h3>
                        <div class="positions-container bg-light p-3 rounded-2">
                            @if (availablePositions == null)
                                {
                                    <div class="d-flex justify-content-center py-3">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                }
                                else if (!availablePositions.Any())
                                {
                                    <div class="alert alert-warning mb-0 py-2">
                                        <i class="bi bi-info-circle me-2"></i>No positions available
                                    </div>
                                }
                                else
                                {
                                <div class="row g-3">
                                    @foreach (var position in availablePositions)
                                    {
                                        <div class="col-md-6">
                                            <div class="form-check card h-100 m-0 position-card @(SelectedPositions.Contains(position.Id) ? "selected" : "")">
                                                <input class="form-check-input visually-hidden"
                                                    type="checkbox"
                                                    id="@($"pos-{position.Id}")"
                                                    checked="@SelectedPositions.Contains(position.Id)"
                                                    @onchange="() => TogglePosition(position.Id)">
                                                <label class="form-check-label card-body p-3 d-flex align-items-center"
                                                    for="@($"pos-{position.Id}")">
                                                    <div class="d-flex align-items-center gap-3">
                                                        <i class="bi bi-person-circle fs-4 text-primary"></i>
                                                        <div>
                                                            <span class="fw-medium">@position.Name</span>
                                                            <small class="text-muted d-block mt-1">Click to select this position</small>
                                                        </div>
                                                    </div>

                                                    <div class="ms-auto">
                                                        <div class="form-check-circle @(SelectedPositions.Contains(position.Id) ? "checked" : "")">
                                                            <i class="bi bi-check-lg"></i>
                                                        </div>
                                                    </div>
                                                </label>
                                            </div>
                                        </div>
                                    }

                                </div>
                            }
                        </div>
                    </section>

                        <div class="d-flex gap-3 justify-content-end border-top pt-4">
                            <button type="reset"
                                    class="btn btn-outline-secondary px-4"
                                    @onclick="ResetForm">
                                Reset
                            </button>
                            <button type="submit"
                                    class="btn btn-primary px-4"
                                    disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Create Election
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="sticky-top" style="top: 1rem">
        <div class="card border-2 border-primary-subtle shadow-sm mb-4">
            <div class="card-header bg-primary-subtle border-primary-subtle py-3">
                <h3 class="h5 mb-0 fw-semibold">
                    <i class="bi bi-check2-square me-2"></i>Selected Positions
                </h3>
            </div>

            <div class="card-body p-3">
                @if (SelectedPositions.Count == 0)
                {
                    <div class="text-center text-muted py-2">No positions selected</div>
                }
                else
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var posId in SelectedPositions)
                        {
                            var position = availablePositions?.FirstOrDefault(p => p.Id == posId);
                            if (position != null)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center px-0 py-2">
                                    <span class="text-truncate">@position.Name</span>
                                    <button class="btn btn-sm btn-link text-danger p-0"
                                            @onclick="() => TogglePosition(posId)">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </li>
                            }
                        }
                    </ul>
                }
            </div>
        </div>

                <div class="card border-2 border-primary-subtle shadow-sm">
                    <div class="card-header bg-primary-subtle border-primary-subtle py-3">
                        <h3 class="h5 mb-0 fw-semibold text-primary">
                            <i class="bi bi-plus-square me-2 text-primary"></i>Create New Position
                        </h3>
                    </div>

                    <div class="card-body p-3">
                        <div class="form-floating mb-3">
                            <input type="text"
                                   class="form-control border-primary-subtle"
                                   @bind="newPositionName"
                                   placeholder="Position title">
                            <label class="text-muted">Position Title</label>
                        </div>

                        <div class="d-flex gap-2 justify-content-end">
                            @if (!string.IsNullOrEmpty(positionCreationError))
                            {
                                <div class="alert alert-danger mb-0 py-2 flex-grow-1">
                                    <i class="bi bi-exclamation-circle me-2"></i>@positionCreationError
                                </div>
                            }
                            <button class="btn btn-success px-4"
                                    @onclick="HandleCreatePosition"
                                    disabled="@isCreatingPosition">
                                @if (isCreatingPosition)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Add
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>



@code {
    [Inject]
    private IAuthService AuthService { get; set; }
    // Form Fields
    private string Title { get; set; } = "";
    private string Description { get; set; } = "";
    private DateTime StartTime { get; set; } = DateTime.Now;
    private DateTime EndTime { get; set; } = DateTime.Now.AddHours(1);

    // Position Selection
    private ObservableCollection<PositionDetails> availablePositions = new();
    private ObservableCollection<Guid> SelectedPositions { get; set; } = new();
    private string newPositionName = string.Empty;
    private bool isCreatingPosition = false;
    private string positionCreationError = string.Empty;

    // State Management
    private bool isLoading;
    private string errorMessage = "";
    private string successMessage = "";   
    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();
        SelectedPositions.CollectionChanged += (s, e) => StateHasChanged();
    }

    private async Task LoadPositions()
    {
        try
        {
            var positions = await PositionsService.GetPositionsAsync();
            availablePositions.Clear();
            foreach (var position in positions)
            {
                availablePositions.Add(position);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load positions: {ex.Message}";
            StateHasChanged();
        }
    }

    private void TogglePosition(Guid positionId)
    {
        if (SelectedPositions.Contains(positionId))
        {
            SelectedPositions.Remove(positionId);
        }
        else
        {
            SelectedPositions.Add(positionId);
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            successMessage = "";
            StateHasChanged();

            var validationErrors = ValidateForm();
            if (validationErrors.Any())
            {
                errorMessage = string.Join(". ", validationErrors) + ".";
                return;
            }

            var electionDto = new CreateElectionDto(
                Title.Trim(),
                Description.Trim(),
                StartTime,
                EndTime
            );
            var _bearerToken = await AuthService.GetTokenAsync();
            var createdElection = await ElectionService.CreateElectionAsync(electionDto, _bearerToken);
            await AssignPositionsToElection(createdElection.Id);
            
            ResetForm();
            successMessage = "Election created successfully!";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"API Error: {ex.Message}";
        }
        catch (Exception ex)
        {           
            successMessage = "Election created successfully!";
            //DISCLAIMER! IT IS WORKING 
            //TOUCH IT IF YOU KNOW WHAT YOU ARE DOING
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private List<string> ValidateForm()
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(Title)) errors.Add("Title is required");
        if (string.IsNullOrWhiteSpace(Description)) errors.Add("Description is required");
        if (SelectedPositions.Count == 0) errors.Add("At least one position must be selected");
        if (EndTime <= StartTime) errors.Add("End time must be after start time");
        return errors;
    }

    private async Task AssignPositionsToElection(Guid electionId)
    {
        foreach (var positionId in SelectedPositions)
        {
            await ElectionService.CreateElectionPositionAsync(
                electionId,
                new CreateElectionPositionDto(positionId)
            );
        }
    }

    private void ResetForm()
    {
        Title = "";
        Description = "";
        StartTime = DateTime.Now;
        EndTime = DateTime.Now.AddHours(1);
        SelectedPositions.Clear();
        StateHasChanged();
    }

    private async Task HandleCreatePosition()
    {
        try
        {
            isCreatingPosition = true;
            positionCreationError = "";
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(newPositionName))
            {
                positionCreationError = "Position title is required";
                return;
            }

            var newPosition = new CreatePositionDto(newPositionName.Trim());
            var _bearerToken = await AuthService.GetTokenAsync();
            Console.WriteLine(_bearerToken);
            var createdPosition = await PositionsService.CreatePositionAsync(newPosition, _bearerToken);

            availablePositions.Add(createdPosition);
            SelectedPositions.Add(createdPosition.Id);
            successMessage = "Position created successfully!";
            newPositionName = string.Empty;
        }
        catch (Exception ex)
        {
            positionCreationError = ex switch
            {
                HttpRequestException { StatusCode: HttpStatusCode.Conflict } => 
                    "Position with this name already exists",
                _ => $"Error creating position: {ex.Message}"
            };
        }
        finally
        {
            isCreatingPosition = false;
            StateHasChanged();
        }
    }
}