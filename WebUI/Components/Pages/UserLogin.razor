@page "/login"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Net
@using WebUI.DTOs.User;
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IAuthService AuthService
@using System.Text.Json
@using System.IO

<div class="enterprise-login-container" style="min-height: 90vh; display: flex; align-items: center; padding: 5px;">
    <div class="card enterprise-card" style="width: 100%; max-width: 450px; margin: 0 auto; scrollable-container">
        <div class="card-header enterprise-card-header">
            <div class="enterprise-branding">
                <svg class="enterprise-logo" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11v8.8z"/>
                </svg>
                <h2 class="enterprise-title">
                    <span class="text-primary">Secure</span> Portal
                </h2>
            </div>
            <p class="enterprise-subtitle">Enter your credentials to continue</p>
        </div>

        <div class="card-body enterprise-card-body" style="padding: 0.5rem;">
            <EditForm Model="@model" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="enterprise-form-group" style="margin-bottom: 1.0rem;">
                    <div class="form-floating">
                        <input type="text" 
                               class="form-control enterprise-input" 
                               id="identifier" 
                               placeholder="Email/Username"
                               autocomplete="username"
                               @bind="model.Identifier" />
                        <label for="identifier" class="enterprise-input-label">Work Email/ Work ID</label>
                    </div>
                    <ValidationMessage For="@(() => model.Identifier)" />
                </div>

                <div class="enterprise-form-group">
                    <div class="form-floating position-relative">
                        <input type="@(showPassword ? "text" : "password")" 
                               class="form-control enterprise-input" 
                               id="password" 
                               placeholder="Password"
                               autocomplete="current-password"
                               @bind="model.Password" />
                        <label for="password" class="enterprise-input-label">Password</label>
                        <button type="button" 
                                class="btn btn-link enterprise-password-toggle"
                                @onclick="TogglePasswordVisibility">
                            <i class="bi @passwordIcon"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => model.Password)" />
                </div>

                <div class="enterprise-options" style="display: flex;  align-items: center; margin: 0 0;">
                    <div class="form-check enterprise-check">
                        <input type="checkbox" 
                               class="form-check-input enterprise-check-input" 
                               id="rememberMe"
                               @bind="rememberMe" />
                        <label class="form-check-label enterprise-check-label" for="rememberMe">
                            Maintain Session
                        </label>
                    </div>
                    <a href="/register" class="enterprise-link" style="font-size: 0.875rem;">No Account?</a>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="enterprise-alert enterprise-alert-danger" style="margin: 1rem 0; padding: 0.75rem;">
                        <i class="bi bi-shield-exclamation"></i>
                        @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="enterprise-alert enterprise-alert-success" style="margin: 1rem 0; padding: 0.75rem;">
                        <i class="bi bi-shield-check"></i>
                        Authentication successful. Redirecting top home page...
                    </div>
                    <script suppress-error="BL9992">
                        console.log('Access Token:', '@successMessage');
                    </script>
                }

                <div class="enterprise-action-bar" style="margin-top: 0.3rem;">
                    <button type="submit" 
                            class="btn enterprise-btn-primary"
                            disabled="@isLoading"
                            style="width: 100%; padding: 0.40rem;">
                        @if (isLoading)
                        {
                            <span class="enterprise-spinner"></span>
                        }
                        else
                        {
                            <i class="bi bi-lock"></i>
                        }
                        Authorize Access
                    </button>
                </div>
            </EditForm>
        </div>

        <div class="enterprise-footer" style="padding: 1rem; text-align: center;">
            <p class="enterprise-legal" style="font-size: 0.75rem; margin: 0;">
                <i class="bi bi-shield-lock"></i>
                Protected by 0x4B47 Enterprise Security Protocol
            </p>
        </div>
    </div>
</div>

<style scoped>
    .enterprise-login-container {
        display: flex;
        min-height:100vh;
        align-items: center;
        justify-content: center;
        background: var(--enterprise-chart-bg);
    }

    .enterprise-card {
        width: 460px;
        border-radius: 12px;
        border: 1px solid var(--enterprise-border);
        box-shadow: 0 8px 32px rgba(42, 92, 141, 0.1);
    }

    .enterprise-card-header {
        background: white;
        border-bottom: 3px solid var(--enterprise-primary);
        text-align: center;
        padding: 2rem;
    }

    .enterprise-branding {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .enterprise-logo {
        width: 40px;
        height: 40px;
        color: var(--enterprise-primary);
    }

    .enterprise-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin: 0;
        letter-spacing: -0.5px;
    }

    .enterprise-subtitle {
        color: var(--enterprise-secondary);
        font-size: 0.9rem;
        margin: 0.5rem 0 0;
    }

    .enterprise-card-body {
        padding: 1.5rem;
        background: linear-gradient(to bottom right, white 0%, var(--enterprise-chart-bg) 100%);
    }

    .enterprise-form-group {
        margin-bottom: 1.5rem;
    }

    .enterprise-input {
        border: 2px solid var(--enterprise-border);
        border-radius: 6px;
        padding: 1rem;
        transition: all 0.3s ease;
    }

    .enterprise-input:focus {
        border-color: var(--enterprise-accent);
        box-shadow: 0 0 0 3px rgba(72, 163, 198, 0.1);
    }

    .enterprise-input-label {
        color: var(--enterprise-secondary);
        font-size: 0.9rem;
        padding: 0.8rem;
    }

    .enterprise-password-toggle {
        color: var(--enterprise-secondary);
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
    }

    .enterprise-password-toggle:hover {
        color: var(--enterprise-accent);
    }

    .enterprise-options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 0.5rem 0;
    }

    .enterprise-check-label {
        color: var(--enterprise-secondary);
        font-size: 0.9rem;
    }

    .enterprise-check-input:checked {
        background-color: var(--enterprise-primary);
        border-color: var(--enterprise-primary);
    }

    .enterprise-link {
        color: var(--enterprise-accent);
        font-size: 0.9rem;
        text-decoration: none;
    }

    .enterprise-alert {
        padding: 1rem;
        border-radius: 6px;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin: 1.5rem 0;
        font-size: 0.9rem;
    }

    .enterprise-alert-danger {
        background: color-mix(in srgb, var(--enterprise-danger) 10%, white);
        border: 1px solid color-mix(in srgb, var(--enterprise-danger) 20%, white);
        color: var(--enterprise-danger);
    }

    .enterprise-alert-success {
        background: color-mix(in srgb, var(--enterprise-success) 10%, white);
        border: 1px solid color-mix(in srgb, var(--enterprise-success) 20%, white);
        color: var(--enterprise-success);
    }

    .enterprise-action-bar {
        border-top: 1px solid var(--enterprise-border);
        padding-top: 1.5rem;
        margin-top: 1.5rem;
    }

    .enterprise-btn-primary {
        width: 100%;
        padding: 0.75rem;
        border-radius: 6px;
        background: var(--enterprise-primary);
        border: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .enterprise-btn-primary:hover {
        background: color-mix(in srgb, var(--enterprise-primary) 90%, black);
        transform: translateY(-1px);
    }

    .enterprise-btn-primary:active {
        transform: translateY(0);
    }

    .enterprise-spinner {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 2px solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spin 0.75s linear infinite;
    }

    .enterprise-footer {
        padding: 1.5rem;
        background: var(--enterprise-chart-bg);
        border-top: 1px solid var(--enterprise-border);
        text-align: center;
    }

    .enterprise-legal {
        color: var(--enterprise-secondary);
        font-size: 0.8rem;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }
</style>

@code {
    private LoginFormModel model = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";
    private bool showPassword = false;
    private string passwordIcon = "bi-eye-slash";
    private bool rememberMe = false;
    private DateTime? lastAttemptTime;
    private const int attemptDelaySeconds = 3;
   

    private async Task HandleLogin()
    {
        if (lastAttemptTime.HasValue && 
           (DateTime.Now - lastAttemptTime.Value).TotalSeconds < attemptDelaySeconds)
        {
            errorMessage = $"Please wait {attemptDelaySeconds} seconds between attempts";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";
        lastAttemptTime = DateTime.Now;

        try
        {
            var loginDto = new LoginUserDto(model.Identifier, model.Password);
            var response = await AuthService.LoginAsync(loginDto);
                
            await _localStorage.SetItemAsync("authToken", response.AccessToken);
            
            if (rememberMe)
            {
                await _localStorage.SetItemAsync("rememberToken", response.AccessToken);
            }

            successMessage = response.AccessToken;
            ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(response.AccessToken);

            var role = await AuthService.GetUserRoleAsync();
            Navigation.NavigateTo(role == "Admin" ? "/dashboard" : "/");
        }
        catch (HttpRequestException ex)
        {
            errorMessage = ex.StatusCode switch {
                HttpStatusCode.Unauthorized => "Invalid credentials. Please try again.",
                HttpStatusCode.BadRequest => "Invalid request format.",
                _ => $"Server error: {(int?)ex.StatusCode}"
            };
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility() 
    {
        showPassword = !showPassword;
        passwordIcon = showPassword ? "bi-eye" : "bi-eye-slash";
    }

    private void ResetForm()
    {
        model = new LoginFormModel();
        errorMessage = "";
    }

    public class LoginFormModel
    {
        [Required(ErrorMessage = "Email or username is required")]
        [StringLength(50, ErrorMessage = "Identifier too long")]
        public string Identifier { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be 6-100 characters")]
        public string Password { get; set; } = "";
    }
}
