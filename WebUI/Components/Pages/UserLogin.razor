@page "/account/login"
@using System.ComponentModel.DataAnnotations
@using OnlineVotingSystem.api.DTOs
@inject NavigationManager Navigation

<form @onsubmit="HandleLogin">
    <div class="card border-primary shadow-lg text-dark p-4" style="border-radius: 24px; max-width: 400px; width: 100%;">
        <div class="card-header text-dark fs-4 border-primary text-center">Login</div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            <div class="form-floating mb-3">
                <input type="text"
                       class="form-control"
                       @bind="loginModel.Identifier"
                       @oninput="UpdateIdentifier"
                       placeholder="eg 10130234" />
                <label>User Identifier</label>
            </div>

            <div class="form-floating mb-3">
                <input type="password"
                       class="form-control"
                       @bind="loginModel.Password"
                       @oninput="UpdatePassword"
                       placeholder="Password" />
                <label>Password</label>
            </div>

            <div class="form-group text-center">
                <button type="submit" class="btn btn-primary mt-3 w-100" disabled="@IsBusy">
                    @if (IsBusy)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
            </div>
        </div>
    </div>
</form>

@code {
    [Inject] public required IAuthService AuthService { get; set; }
    [Inject] public required ILogger<UserLogin> Logger { get; set; }  // Inject ILogger for debugging

    private LoginModel loginModel = new();
    private string ErrorMessage = "";
    private bool IsBusy = false;

    private void UpdateIdentifier(ChangeEventArgs e)
    {
        loginModel.Identifier = e.Value?.ToString() ?? "";
        Logger.LogInformation($"[DEBUG] Identifier updated: {loginModel.Identifier}");
    }

    private void UpdatePassword(ChangeEventArgs e)
    {
        loginModel.Password = e.Value?.ToString() ?? "";
        Logger.LogInformation($"[DEBUG] Password updated: {loginModel.Password}");
    }

    private async Task HandleLogin(EventArgs e)  // Explicit EventArgs parameter
    {
        IsBusy = true;
        ErrorMessage = "";

        try
        {
            Logger.LogInformation("[DEBUG] Login attempt started.");

            if (string.IsNullOrWhiteSpace(loginModel.Identifier) || string.IsNullOrWhiteSpace(loginModel.Password))
            {
                ErrorMessage = "Both fields are required.";
                Logger.LogWarning("[ERROR] Login failed: Empty fields.");
                return;
            }

            Logger.LogInformation($"[DEBUG] Sending login request with:\n" +
                                  $"Identifier: {loginModel.Identifier}\n" +
                                  $"Password: {loginModel.Password}");

            var userDto = new LoginUserDto(
                Identifier: loginModel.Identifier,
                Password: loginModel.Password);

            var result = await AuthService.LoginAsync(userDto);

            if (result != null && !string.IsNullOrEmpty(result.AccessToken))
            {
                Logger.LogInformation("[SUCCESS] Login successful.");
                Navigation.NavigateTo("/", true);
            }
            else
            {
                ErrorMessage = "Invalid login response from server.";
                Logger.LogWarning("[ERROR] Login failed: Invalid server response.");
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = "Network error. Please check your connection.";
            Logger.LogError(ex, "[ERROR] Login error: HTTP request failed.");
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred.";
            Logger.LogError(ex, "[ERROR] Unexpected login error.");
        }
        finally
        {
            IsBusy = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "User Identifier is required.")]
        public string Identifier { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}
