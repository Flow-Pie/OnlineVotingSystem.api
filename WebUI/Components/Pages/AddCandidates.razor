@page "/add-candidate"
@using OnlineVotingSystem.api.DTOs.Candidate
@using OnlineVotingSystem.api.DTOs.Position
@using WebUI.Services
@using OnlineVotingSystem.api.DTOs.ElectionPosition
@using OnlineVotingSystem.api.DTOs.User
@inject ICandidatesService CandidatesService
@inject IUsersService UsersService
@inject IElectionsService ElectionsService
@inject IPositionsService PositionsService
@rendermode InteractiveServer

<main class="container mt-4 scrollable-container">
    <style>
        :root {
            /* Enterprise Theme Variables */
            --enterprise-primary: #2A5C8D;
            --enterprise-secondary: #5F7D95;
            --enterprise-accent: #48A3C6;
            --enterprise-success: #3A9D85;
            --enterprise-danger: #DC3545;
            --enterprise-border: #EBEFF2;
            --enterprise-chart-bg: rgba(245, 248, 250, 0.9);

            /* Bootstrap Overrides */
            --bs-primary: var(--enterprise-primary);
            --bs-secondary: var(--enterprise-secondary);
            --bs-success: var(--enterprise-success);
            --bs-info: var(--enterprise-accent);
            --bs-danger: var(--enterprise-danger);
            --bs-border-color: var(--enterprise-border);
            --bs-link-color: var(--enterprise-accent);
            --bs-link-hover-color: var(--enterprise-primary);
        }

        .scrollable-container {
            max-height: calc(100vh - 100px);
            overflow-y: auto;
            padding-right: 0.5rem;
        }

        .card {
            border: 2px solid var(--enterprise-border);
            border-radius: 0.75rem;
            transition: transform 0.15s ease, box-shadow 0.15s ease;
        }

        .card-header {
            background-color: rgba(42, 92, 141, 0.08);
            border-bottom: 2px solid var(--enterprise-border);
            padding: 1.25rem 1.5rem;
        }

        .form-control, .form-select {
            border: 2px solid var(--enterprise-border);
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--enterprise-accent);
            box-shadow: 0 0 0 0.25rem rgba(72, 163, 198, 0.2);
        }

        .btn-primary {
            background-color: var(--enterprise-primary);
            border-color: var(--enterprise-primary);
            padding: 0.5rem 1.5rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #234d75;
            border-color: #234d75;
            transform: translateY(-1px);
        }

        .btn-outline-secondary {
            border-color: var(--enterprise-border);
            color: var(--enterprise-secondary);
        }

        .alert {
            border: 2px solid transparent;
            border-radius: 0.75rem;
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.08);
            border-color: var(--enterprise-danger);
            color: var(--enterprise-danger);
        }

        .alert-success {
            background-color: rgba(58, 157, 133, 0.08);
            border-color: var(--enterprise-success);
            color: var(--enterprise-success);
        }

        .text-muted {
            color: var(--enterprise-secondary) !important;
        }

        .border-primary-subtle {
            border-color: rgba(42, 92, 141, 0.15) !important;
        }

        .status-container .alert {
            box-shadow: 0 2px 8px rgba(42, 92, 141, 0.08);
        }
    </style>

    <header class="mb-5">
        <h1 class="fw-bold display-6 text-primary">Add New Candidate</h1>
        <hr class="border-primary opacity-50" style="height: 2px">
    </header>

    <div class="status-container position-fixed top-0 p-3" style="z-index: 9999">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger d-flex align-items-center shadow-sm">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div class="flex-grow-1">@errorMessage</div>
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success d-flex align-items-center shadow-sm">
                <i class="bi bi-check-circle-fill me-2"></i>
                <div class="flex-grow-1">@successMessage</div>
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }
    </div>

    <div class="card border-primary-subtle shadow-lg">
        <div class="card-header">
            <h2 class="h5 mb-0 fw-semibold text-primary">
                <i class="bi bi-person-plus me-2"></i>Candidate Details
            </h2>
        </div>

        <div class="card-body p-4">
            <EditForm Model="@model" OnValidSubmit="AddCandidate">
                <div class="mb-4">
                    <div class="form-floating">
                        <input type="text"
                            class="form-control border-primary-subtle"
                            id="nationalIdInput"
                            placeholder="Enter National ID"
                            @bind="NationalIdInput" />
                        <label for="nationalIdInput" class="text-muted">National ID</label>
                    </div>
                    <button type="button" 
                            class="btn btn-primary mt-3 px-4"
                            @onclick="SearchUserByNationalId" 
                            @onclick:preventDefault>
                        <i class="bi bi-search me-2"></i>Search User
                    </button>

                    @if (!string.IsNullOrEmpty(foundUserName))
                    {
                        <div class="mt-3 alert alert-success py-2">
                            <i class="bi bi-check-circle me-2"></i>
                            User Found: <strong>@foundUserName</strong>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(searchErrorMessage))
                    {
                        <div class="mt-3 alert alert-danger py-2">
                            <i class="bi bi-x-circle me-2"></i>@searchErrorMessage
                        </div>
                    }
                </div>

                <div class="mb-4">
                    <div class="form-floating">
                        <select class="form-select border-primary-subtle"
                                id="electionPositionId"
                                @bind="model.ElectionPositionId">
                            <option value="">Select a Position</option>
                            @foreach (var position in Positions)
                            {
                                <option value="@position.Id">@position.Name</option>
                            }
                        </select>
                        <label for="electionPositionId" class="text-muted">Position</label>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="form-floating">
                        <input type="text"
                            class="form-control border-primary-subtle"
                            id="party"
                            @bind="model.Party"
                            placeholder="Party">
                        <label for="party" class="text-muted">Party</label>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="form-floating">
                        <textarea class="form-control border-primary-subtle"
                                id="bio"
                                @bind="model.Bio"
                                placeholder="Bio"
                                style="height: 100px"></textarea>
                        <label for="bio" class="text-muted">Bio</label>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="form-floating">
                        <input type="url"
                            class="form-control border-primary-subtle"
                            id="photoUrl"
                            @bind="model.PhotoUrl"
                            placeholder="Photo URL (optional)">
                        <label for="photoUrl" class="text-muted">Photo URL (Optional)</label>
                    </div>
                </div>

                <div class="d-flex gap-3 justify-content-end border-top pt-4 mt-4">
                    <button type="reset"
                            class="btn btn-outline-secondary px-4"
                            @onclick="ResetForm">
                        <i class="bi bi-arrow-counterclockwise me-2"></i>Reset
                    </button>
                    <button type="submit"
                            class="btn btn-primary px-4"
                            disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-person-add me-2"></i>
                        }
                        Add Candidate
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</main>


@code {

    private CandidateFormModel model = new CandidateFormModel();
    // Form fields
    private Guid SelectedUserId;
    private Guid SelectedElectionPositionId;
    private string Party = "";
    private string Bio = "";
    private string PhotoUrl = "";

    private string NationalIdInput = "";
    private string foundUserName = "";
    private string searchErrorMessage = "";

    private List<UserDetailsDto> Users = new();
    private List<PositionDetails> Positions = new();

    private string errorMessage = "";
    private string successMessage = "";

    private bool isLoading = false;
    private bool isSearching = false;

    [Inject]
    private ICandidatesService CandidateService { get; set; }

    [Inject]
    private IAuthService AuthService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                throw new  Exception("Authentication token is missing. Please log in.");
            }

            CandidateService.SetBearerToken(token);

            await LoadDropdownData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Initialization failed: {ex.Message}";
        }
    }

    private async Task LoadDropdownData()
    {
        try
        {
            Users = (await UsersService.GetUsersAsync()).ToList();
            Positions = (await PositionsService.GetPositionsAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
        }
    }

    private async Task AddCandidate()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            if (model.UserId == Guid.Empty )
            {
                throw new Exception("Please fill in all required fields.");
            }

            if (!string.IsNullOrWhiteSpace(model.PhotoUrl) && !Uri.TryCreate(model.PhotoUrl, UriKind.Absolute, out _))
            {
                throw new Exception("Invalid Photo URL format.");
            }

            var candidateDto = new CreateCandidateDto(
                model.UserId,
                model.ElectionPositionId,
                model.Party,
                model.Bio,
                string.IsNullOrWhiteSpace(model.PhotoUrl) ? null : new Uri(model.PhotoUrl)
            );

            var createdCandidate = await CandidateService.CreateCandidateAsync(candidateDto);

            successMessage = "Candidate added successfully!";

            // Reset the form
            ResetForm();
        }
        catch (ApiException ex)
        {
            errorMessage = $"API Error: {ex.ProblemDetails.Title} - {ex.ProblemDetails.Detail}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        model = new CandidateFormModel();
        NationalIdInput = "";
        foundUserName = "";
        searchErrorMessage = "";
    }

    private async Task SearchUserByNationalId()
    {
        isSearching = true;
        searchErrorMessage = "";
        foundUserName = "";
        SelectedUserId = Guid.Empty;

        if (string.IsNullOrWhiteSpace(NationalIdInput))
        {
            searchErrorMessage = "Please enter a National ID";
            isSearching = false;
            return;
        }

        try
        {
            var allUsers = await UsersService.GetUsersAsync();

            // safer parsing
            if (int.TryParse(NationalIdInput.Trim(), out int nationalId))
            {
                var user = allUsers.FirstOrDefault(u => u.NationalId == nationalId);

                if (user != null)
                {
                    SelectedUserId = user.Id;
                    foundUserName = user.Name;
                    searchErrorMessage = ""; 
                }
                else
                {
                    searchErrorMessage = "No user found with this National ID";
                    foundUserName = "";
                    SelectedUserId = Guid.Empty;
                }
            }
            else
            {
                searchErrorMessage = "Invalid National ID format. Please enter a valid number.";
            }
        }
        catch (ApiException ex)
        {
            searchErrorMessage = $"API Error: {ex.ProblemDetails?.Detail ?? ex.Message}";
        }
        catch (Exception ex)
        {
            searchErrorMessage = $"Search failed: {ex.Message}";
        }
        finally
        {
            isSearching = false;
        }
    }
    public class CandidateFormModel
    {
        public Guid UserId { get; set; }
        public Guid ElectionPositionId { get; set; }
        public string Party { get; set; } = "";
        public string Bio { get; set; } = "";
        public string PhotoUrl { get; set; } = "";
    }
}  