@page "/add-candidate"
@using OnlineVotingSystem.api.DTOs.Candidate
@using OnlineVotingSystem.api.DTOs.Position
@using WebUI.Services
@using OnlineVotingSystem.api.DTOs.ElectionPosition
@using OnlineVotingSystem.api.DTOs.User
@inject ICandidatesService CandidatesService
@inject IUsersService UsersService
@inject IElectionsService ElectionsService
@inject IPositionsService PositionsService
@rendermode InteractiveServer

<main class="container mt-4 scrollable-container">
    <!-- Page Header -->
    <header class="mb-5">
        <h1 class="fw-bold display-6 text-primary">Add New Candidate</h1>
        <hr class="border-primary opacity-50" style="height: 2px">
    </header>

    <!-- Status Messages -->
    <div class="status-container position-fixed top-0 end-0 p-3" style="z-index: 9999">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger d-flex align-items-center shadow-sm">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div class="flex-grow-1">@errorMessage</div>
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success d-flex align-items-center shadow-sm">
                <i class="bi bi-check-circle-fill me-2"></i>
                <div class="flex-grow-1">@successMessage</div>
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }
    </div>

    <!-- Candidate Form -->
    <div class="card border-2 border-primary-subtle shadow-sm">
        <div class="card-header bg-primary-subtle border-primary-subtle py-3">
            <h2 class="h5 mb-0 fw-semibold">
                <i class="bi bi-person-plus me-2"></i>Candidate Details
            </h2>
        </div>

        <div class="card-body p-4">
            <form @onsubmit="AddCandidate">
                <!-- User Selection -->
                <div class="mb-4">
                    <div class="form-floating">
                        <select class="form-select border-primary-subtle"
                                id="userId"
                                @bind="SelectedUserId">
                            <option value="">Select a User</option>
                            @foreach (var user in Users)
                            {
                                <option value="@user.Id">@user.Name</option>
                            }
                        </select>
                        <label for="userId" class="text-muted">User</label>
                    </div>
                </div>

                <!-- Election Position Selection -->
                <div class="mb-4">
                    <div class="form-floating">
                        <select class="form-select border-primary-subtle"
                                id="electionPositionId"
                                @bind="SelectedElectionPositionId">
                            <option value="">Select a Position</option>
                            @foreach (var position in Positions)
                            {
                                <option value="@position.Id">@position.Name</option>
                            }
                        </select>
                        <label for="electionPositionId" class="text-muted">Position</label>
                    </div>
                </div>

                <!-- Party -->
                <div class="mb-4">
                    <div class="form-floating">
                        <input type="text"
                               class="form-control border-primary-subtle"
                               id="party"
    using OnlineVotingSystem.api.DTOs.ElectionPosition;
                               @bind="Party"
                               placeholder="Party">
                        <label for="party" class="text-muted">Party</label>
                    </div>
                </div>

                <!-- Bio -->
    using OnlineVotingSystem.api.DTOs.Position;
                <div class="mb-4">
                    <div class="form-floating">
                        <textarea class="form-control border-primary-subtle"
                                  id="bio"
                                  @bind="Bio"
                                  placeholder="Bio"
                                  style="height: 100px"></textarea>
                        <label for="bio" class="text-muted">Bio</label>
                    </div>
                </div>

                <!-- Photo URL -->
                <div class="mb-4">
                    <div class="form-floating">
                        <input type="url"
                               class="form-control border-primary-subtle"
                               id="photoUrl"
                               @bind="PhotoUrl"
                               placeholder="Photo URL">
                        <label for="photoUrl" class="text-muted">Photo URL</label>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="d-flex gap-3 justify-content-end border-top pt-4">
                    <button type="reset"
                            class="btn btn-outline-secondary px-4"
                            @onclick="ResetForm">
                        Reset
                    </button>
                    <button type="submit"
                            class="btn btn-primary px-4"
                            disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Add Candidate
                    </button>
                </div>
            </form>
        </div>
    </div>
</main>

<style>
    .scrollable-container {
        max-height: calc(100vh - 100px);
        overflow-y: auto;
    }
</style>

@code {
    // Form fields
    private Guid SelectedUserId;
    private Guid SelectedElectionPositionId;
    private string Party = "";
    private string Bio = "";
    private string PhotoUrl = "";

    // Dropdown data
    private List<UserDetailsDto> Users = new();
    private List<PositionDetails> Positions = new();

    // Status messages
    private string errorMessage = "";
    private string successMessage = "";

    // Loading state
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDropdownData();
    }

    private async Task LoadDropdownData()
    {
        try
        {
            // Fetch users and election positions
            Users = (await UsersService.GetUsersAsync()).ToList();
            Positions = (await PositionsService.GetPositionsAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
        }
    }

    private async Task AddCandidate()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            // Validate required fields
            if (SelectedUserId == Guid.Empty || SelectedElectionPositionId == Guid.Empty || string.IsNullOrWhiteSpace(Bio))
            {
                throw new Exception("Please fill in all required fields.");
            }

            // Create the candidate
            var candidateDto = new CreateCandidateDto(
                SelectedUserId,
                SelectedElectionPositionId,
                Party,
                Bio,
                string.IsNullOrWhiteSpace(PhotoUrl) ? null : new Uri(PhotoUrl)
            );

            var createdCandidate = await CandidatesService.CreateCandidateAsync(candidateDto);

            // Show success message
            successMessage = "Candidate added successfully!";

            // Reset the form
            ResetForm();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        SelectedUserId = Guid.Empty;
        SelectedElectionPositionId = Guid.Empty;
        Party = "";
        Bio = "";
        PhotoUrl = "";
    }
}