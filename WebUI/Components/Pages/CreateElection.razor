@page "/create-election"
@using OnlineVotingSystem.api.DTOs.Election
@using OnlineVotingSystem.api.DTOs.ElectionPosition
@using OnlineVotingSystem.api.DTOs.Position
@rendermode InteractiveServer

<main class="container mt-4">
    <h2 class="fw-bold mb-3">Create Election & Positions</h2>

    <!-- Error Message Display -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <!-- Success Message Display -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

    <div class="row">
        <!-- Left: Form Section -->
        <div class="col-lg-8">
            <div class="card shadow p-4 mb-4">
                <form @onsubmit="HandleSubmit">
                    <!-- Election Details -->
                    <div class="mb-3">
                        <label class="form-label fw-bold">Title</label>
                        <input type="text" class="form-control" @bind="Title" placeholder="Election title" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Description</label>
                        <textarea class="form-control" @bind="Description" placeholder="Election description" required></textarea>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-bold">Start Time</label>
                            <input type="datetime-local" class="form-control" @bind="StartTime" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label fw-bold">End Time</label>
                            <input type="datetime-local" class="form-control" @bind="EndTime" required>
                        </div>
                    </div>

                    <hr>

                    <!-- Position Selection -->
                    <h5 class="fw-bold mb-3">Select Positions</h5>
                    <div class="mb-3">
                        @if (availablePositions == null)
                        {
                            <p>Loading positions...</p>
                        }
                        else if (!availablePositions.Any())
                        {
                            <p>No positions available. Please create positions first.</p>
                        }
                        else
                        {
                            foreach (var position in availablePositions)
                            {
                                <div class="form-check">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           id="@position.Id"
                                           checked="@(SelectedPositions.Contains(position.Id))"
                                           @onchange="() => TogglePosition(position.Id)">
                                    <label class="form-check-label" for="@position.Id">
                                        @position.Name
                                    </label>
                                </div>
                            }
                        }
                    </div>

                    <hr>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-success" disabled="@isLoading">
                        <i class="bi bi-check-circle"></i>
                        @(isLoading ? "Creating..." : "Create Election")
                    </button>
                </form>
            </div>
        </div>

        <!-- Right: Cards Section -->
        <div class="col-lg-4">
            <div class="card text-white bg-info mb-3 small-card">
                <div class="card-body">
                    <h6 class="card-title"><i class="bi bi-people-fill"></i> Selected Positions</h6>
                    <p class="card-text fs-4">@SelectedPositions.Count</p>
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    [Inject] public IElectionsService ElectionService { get; set; }
    [Inject] public IPositionsService PositionsService { get; set; }
    
    // Form Fields
    private string Title { get; set; } = "";
    private string Description { get; set; } = "";
    private DateTime StartTime { get; set; } = DateTime.Now;
    private DateTime EndTime { get; set; } = DateTime.Now.AddHours(1);

    // Position Selection
    private List<PositionDetails> availablePositions;
    private List<Guid> SelectedPositions { get; set; } = new();

    // State Management
    private bool isLoading;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();
    }

    private async Task LoadPositions()
    {
        try
        {
            availablePositions = (await PositionsService.GetPositionsAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load positions: {ex.Message}";
        }
    }

    private void TogglePosition(Guid positionId)
    {
        if (SelectedPositions.Contains(positionId))
            SelectedPositions.Remove(positionId);
        else
            SelectedPositions.Add(positionId);
    }

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            successMessage = "";

            var validationErrors = new List<string>();
            
            if (string.IsNullOrWhiteSpace(Title))
                validationErrors.Add("Title is required");
            
            if (string.IsNullOrWhiteSpace(Description))
                validationErrors.Add("Description is required");
            
            if (SelectedPositions.Count == 0)
                validationErrors.Add("At least one position must be selected");
            
            if (EndTime <= StartTime)
                validationErrors.Add("End time must be after start time");

            if (validationErrors.Any())
            {
                errorMessage = string.Join(". ", validationErrors) + ".";
                return;
            }

            var electionDto = new CreateElectionDto(
                Title: Title.Trim(),
                Description: Description.Trim(),
                StartTime: StartTime,
                EndTime: EndTime
            );

            var createdElection = await ElectionService.CreateElectionAsync(electionDto);

            // Assign positions to the election
            foreach (var positionId in SelectedPositions)
            {
                await ElectionService.CreateElectionPositionAsync(
                    createdElection.Id,
                    new CreateElectionPositionDto(positionId)
                );
            }

            // Reset form
            ResetForm();
            successMessage = "Election created successfully!";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"API Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        Title = "";
        Description = "";
        StartTime = DateTime.Now;
        EndTime = DateTime.Now.AddHours(1);
        SelectedPositions.Clear();
    }
}