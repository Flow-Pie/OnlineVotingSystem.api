@page "/create-election"
@using OnlineVotingSystem.api.DTOs.Election
@using OnlineVotingSystem.api.DTOs.ElectionPosition
@using OnlineVotingSystem.api.DTOs.Position
@rendermode InteractiveServer

<main class="container mt-4">
    <h2 class="fw-bold mb-3">Election Management</h2>

    <!-- Status Messages -->
    <div class="status-container">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
        }
    </div>

    <div class="row g-4">
        <!-- Main Form Column -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h4 class="card-title mb-4"><i class="bi bi-clipboard-plus"></i> New Election</h4>

                    <form @onsubmit="HandleSubmit">
                        <!-- Election Metadata -->
                        <div class="row g-3">
                            <div class="col-12">
                                <label class="form-label">Election Title</label>
                                <input type="text"
                                       class="form-control"
                                       @bind="Title"
                                       placeholder="Annual Student Council Election">
                            </div>

                            <div class="col-12">
                                <label class="form-label">Description</label>
                                <textarea class="form-control"
                                          @bind="Description"
                                          rows="3"
                                          placeholder="Describe the election purpose and scope"></textarea>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Start Date & Time</label>
                                <input type="datetime-local"
                                       class="form-control"
                                       @bind="StartTime">
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">End Date & Time</label>
                                <input type="datetime-local"
                                       class="form-control"
                                       @bind="EndTime">
                            </div>
                        </div>

                        <!-- Position Selection -->
                        <div class="mt-5">
                            <h5 class="mb-3"><i class="bi bi-person-badge"></i> Available Positions</h5>
                            <div class="positions-container bg-light p-3 rounded-2">
                                @if (availablePositions == null)
                                {
                                <div class="text-center py-3">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                                }
                                else if (!availablePositions.Any())
                                {
                                <div class="alert alert-warning mb-0">
                                    No positions found. Create one first.
                                </div>
                                }
                                else
                                {
                                <div class="row g-2">
                                    @foreach (var position in availablePositions)
                                    {
                                    <div class="col-md-6">
                                        <div class="form-check card card-hover">
                                            <input class="form-check-input visually-hidden"
                                                   type="checkbox"
                                                   id="@($"pos-{position.Id}")"
                                                   checked="@SelectedPositions.Contains(position.Id)"
                                                   @onchange="() => TogglePosition(position.Id)">
                                            <label class="form-check-label card-body"
                                                   for="@($"pos-{position.Id}")">
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-person-circle me-2 mt-4 text-primary"></i>
                                                    <div>
                                                        <div class="fw-semibold">@position.Name</div>
                                                        @if (!string.IsNullOrEmpty(position.Name))
                                                        {
                                                        <div class="text-muted small">@position.Name</div>
                                                        }
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                    </div>
                                    }
                                </div>
                                }
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="mt-5 d-flex justify-content-end gap-2">
                            <button type="reset"
                                    class="btn btn-outline-secondary"
                                    @onclick="ResetForm">
                                Reset Form
                            </button>
                            <button type="submit"
                                    class="btn btn-primary"
                                    disabled="@isLoading">
                                @if (isLoading)
                                {
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                }
                                Create Election
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Sidebar: Position Creation -->
        <div class="col-lg-4">
            <div class="sticky-top" style="top: 1rem">
                <!-- Selected Positions Summary -->
                <div class="card shadow-sm mb-4">
                    <div class="card-body">
                        <h5 class="card-title mb-3">
                            <i class="bi bi-check2-square"></i> Selected Positions
                        </h5>
                        <div class="selected-positions">
                            @if (SelectedPositions.Count == 0)
                            {
                            <div class="text-muted">No positions selected</div>
                            }
                            else
                            {
                            <ul class="list-unstyled mb-0">
                                @foreach (var posId in SelectedPositions)
                                {
                                var position = availablePositions?.FirstOrDefault(p => p.Id == posId);
                                if (position != null)
                                {
                                <li class="d-flex justify-content-between align-items-center mb-2">
                                    <span>@position.Name</span>
                                    <button class="btn btn-sm btn-outline-danger"
                                            @onclick="() => TogglePosition(posId)">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </li>
                                }
                                }
                            </ul>
                            }
                        </div>
                    </div>
                </div>

                <!-- Quick Position Creation -->
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-3">
                            <i class="bi bi-plus-circle-dotted"></i> Create New Position
                        </h5>

                        <div class="row g-2">
                            <div class="col-12">
                                <input type="text"
                                       class="form-control form-control-sm"
                                       placeholder="Position title"
                                       @bind="newPositionName">
                            </div>                            
                            <div class="col-12">
                                <button class="btn btn-sm btn-success w-100"
                                        @onclick="HandleCreatePosition"
                                        disabled="@isCreatingPosition">
                                    @if (isCreatingPosition)
                                    {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    }
                                    else
                                    {
                                    <i class="bi bi-plus-lg"></i>
                                    }
                                    Add Position
                                </button>
                            </div>
                            @if (!string.IsNullOrEmpty(positionCreationError))
                            {
                            <div class="col-12">
                                <div class="alert alert-danger alert-sm mb-0 py-1">
                                    @positionCreationError
                                </div>
                            </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<style>
    .card-hover:hover {
        background-color: #f8f9fa;
        cursor: pointer;
    }

    .selected-positions {
        max-height: 300px;
        overflow-y: auto;
    }

    .positions-container {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
    }

    .alert-sm {
        font-size: 0.875rem;
        padding: 0.25rem 0.5rem;
    }

    .status-container {
        position: sticky;
        top: 1rem;
        z-index: 1000;
    }
</style>

@code {
    [Inject] public IElectionsService ElectionService { get; set; }
    [Inject] public IPositionsService PositionsService { get; set; }

    private readonly string _bearerToken = "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMTExMTExMS0xMTExLTExMTEtMTExMS0xMTExMTExMTExMTEiLCJlbWFpbCI6ImFkbWluQHN5c3RlbS5jb20iLCJOYXRpb25hbElkIjoiMTAwMDAwMDEiLCJJc0FkbWluIjoidHJ1ZSIsIm5iZiI6MTc0MjQ2MTg3MCwiZXhwIjoxNzQyNDYzNjcwLCJpYXQiOjE3NDI0NjE4NzAsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0OjUyNTYvIiwiYXVkIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTI1NiJ9.RJwYW-Z7Ne6J4zJ74KgPAi3eTgwpNczR1lPj4QyHZ1q_I1Pe6qsVx8jXiM8N-F3yAkZ1avdG3v5l5aYjsQijtg"; 
    
    // Form Fields
    private string Title { get; set; } = "";
    private string Description { get; set; } = "";
    private DateTime StartTime { get; set; } = DateTime.Now;
    private DateTime EndTime { get; set; } = DateTime.Now.AddHours(1);

    // Position Selection
    private  List<PositionDetails> availablePositions;    
    private List<Guid> SelectedPositions { get; set; } = new();
	private string newPositionName = string.Empty;

	private string newPositionDescription = string.Empty;
	private bool isCreatingPosition = false;
	private string positionCreationError = string.Empty;

    // State Management
    private bool isLoading;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();
    }

    private async Task LoadPositions()
    {
        try
        {
            availablePositions =(await PositionsService.GetPositionsAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load positions: {ex.Message}";
        }
    }

    private void TogglePosition(Guid positionId)
    {
        if (SelectedPositions.Contains(positionId))
            SelectedPositions.Remove(positionId);
        else
            SelectedPositions.Add(positionId);
    }

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            successMessage = "";

            var validationErrors = new List<string>();
            
            if (string.IsNullOrWhiteSpace(Title))
                validationErrors.Add("Title is required");
            
            if (string.IsNullOrWhiteSpace(Description))
                validationErrors.Add("Description is required");
            
            if (SelectedPositions.Count == 0)
                validationErrors.Add("At least one position must be selected");
            
            if (EndTime <= StartTime)
                validationErrors.Add("End time must be after start time");

            if (validationErrors.Any())
            {
                errorMessage = string.Join(". ", validationErrors) + ".";
                return;
            }

            var electionDto = new CreateElectionDto(
                Title: Title.Trim(),
                Description: Description.Trim(),
                StartTime: StartTime,
                EndTime: EndTime
            );

            var createdElection = await ElectionService.CreateElectionAsync(electionDto, _bearerToken);

            // Assign positions to the election
            foreach (var positionId in SelectedPositions)
            {
                await ElectionService.CreateElectionPositionAsync(
                    createdElection.Id,
                    new CreateElectionPositionDto(positionId)
                );
            }

            // Reset form
            ResetForm();
            successMessage = "Election created successfully!";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"API Error: {ex.Message}";
            Console.WriteLine(ex.Message);
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected Error: {ex.Message}";
			Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        Title = "";
        Description = "";
        StartTime = DateTime.Now;
        EndTime = DateTime.Now.AddHours(1);
        SelectedPositions.Clear();
    }


	private async Task HandleCreatePosition()
    {
        try
        {
            isCreatingPosition = true;
            positionCreationError = string.Empty;

            if (string.IsNullOrWhiteSpace(newPositionName))
            {
                positionCreationError = "Position title is required";
                return;
            }

            var newPosition = new CreatePositionDto(
                Name: newPositionName.Trim()                
            );

            var createdPosition = await PositionsService.CreatePositionAsync(newPosition, _bearerToken);
            
            // Update local state
            availablePositions ??= new List<PositionDetails>();
            availablePositions.Add(createdPosition);
            SelectedPositions.Add(createdPosition.Id);

            // Reset form
            newPositionName = string.Empty;
            newPositionDescription = string.Empty;
        }
        catch (Exception ex)
        {
            positionCreationError = ex.Message.Contains("409") 
                ? "Position with this name already exists" 
                : $"Error creating position: {ex.Message}";
        }
        finally
        {
            isCreatingPosition = false;
        }
    }

}