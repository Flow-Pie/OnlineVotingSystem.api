@page "/candidates"
@using OnlineVotingSystem.api.DTOs.Candidate
@using OnlineVotingSystem.api.DTOs.Election
@using WebUI.Services
@rendermode InteractiveServer
@* @inject IToastService ToastService *@

<main class="container mt-4 scrollable-container">
    <h2 class="fw-bold mb-4">Registered Candidates</h2>

    <!-- Search & Filter -->
    <div class="mb-4 d-flex">
        <input type="text" 
               class="form-control me-2" 
               @bind="SearchTerm" 
               @onkeypress="HandleKeyPress" 
               placeholder="Search candidates...">
        <button class="btn btn-primary" @onclick="FilterCandidates">
            <i class="bi bi-search"></i> Search
        </button>
    </div>

    @if (!GroupedCandidates.Any())
    {
        <div class="alert alert-warning text-center">No candidates found.</div>
    }
    else
    {
        <div class="accordion" id="candidatesAccordion">
            @foreach (var position in GroupedCandidates.Keys)
            {
                var positionKey = position.Replace(" ", "").Replace("-", "");
                <div class="accordion-item mb-3">
                    <h2 class="accordion-header" id="heading-@positionKey">
                        <button class="accordion-button collapsed" 
                                type="button" 
                                data-bs-toggle="collapse" 
                                data-bs-target="#collapse-@positionKey">
                            @position
                        </button>
                    </h2>
                    <div id="collapse-@positionKey" 
                         class="accordion-collapse collapse" 
                         data-bs-parent="#candidatesAccordion">
                        <div class="accordion-body">
                            <div class="row">
                                @foreach (var candidate in GetPagedCandidates(position))
                                {
                                    <div class="col-md-4 mb-4">
                                        <div class="card shadow-sm h-100">
                                            <img src="@(candidate.PhotoUrl?.ToString() ?? "/images/placeholder.png")" 
                                                 class="card-img-top" 
                                                 alt="Candidate Image"
                                                 style="height: 250px; object-fit: cover">
                                            <div class="card-body d-flex flex-column">
                                                <h5 class="fw-bold">@candidate.Name</h5>
                                                <p><strong>Party:</strong> @candidate.Party</p>
                                                <p><strong>Election:</strong> @candidate.Election</p>
                                                <p><strong>Total Votes:</strong> !candidate.TotalVotes</p>

                                                <div class="d-flex justify-content-between mt-auto gap-2">
                                                    <button class="btn btn-sm btn-primary flex-grow-1" 
                                                            @onclick="() => ViewProfile(candidate.Id)">
                                                        <i class="bi bi-eye"></i> View
                                                    </button>
                                                    @if (1==1)//TODO!!
                                                    {
                                                        <button class="btn btn-sm btn-warning flex-grow-1" 
                                                                @onclick="() => EditCandidate(candidate.Id)">
                                                            <i class="bi bi-pencil"></i> Edit
                                                        </button>
                                                        <button class="btn btn-sm btn-danger flex-grow-1" 
                                                                @onclick="() => DeleteCandidate(candidate.Id)">
                                                            <i class="bi bi-trash"></i> Delete
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            @if (GetTotalPages(position) > 1)
                            {
                                <nav class="mt-3">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(CurrentPages[position] == 1 ? "disabled" : "")">
                                            <button class="page-link" 
                                                    @onclick="() => PreviousPage(position)">
                                                Previous
                                            </button>
                                        </li>
                                        <li class="page-item disabled">
                                            <span class="page-link">
                                                Page @CurrentPages[position] of @GetTotalPages(position)
                                            </span>
                                        </li>
                                        <li class="page-item @(CurrentPages[position] == GetTotalPages(position) ? "disabled" : "")">
                                            <button class="page-link" 
                                                    @onclick="() => NextPage(position)">
                                                Next
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    </main>

@code
 {
    private string SearchTerm { get; set; } = "";
    private List<CandidateSerializedDto> Candidates { get; set; } = new();
    private Dictionary<string, List<CandidateSerializedDto>> GroupedCandidates { get; set; } = new();
    private Dictionary<string, int> CurrentPages { get; set; } = new();
    private const int PageSize = 3;

    [Inject]
    private ICandidatesService CandidateService { get; set; }

    [Inject]
    private IAuthService AuthService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCandidates();
        GroupCandidates();
    }

    private async Task LoadCandidates()
    {
        try
        {
            var token = "";
            CandidateService.SetBearerToken(token);
            
            Candidates = (await CandidateService.GetSerializedCandidatesAsync()).ToList();
        }
        catch (Exception ex)
        {
            @* ToastService.ShowError($"Error loading candidates: {ex.Message}"); *@
        }
    }

    private void GroupCandidates()
    {
        GroupedCandidates = Candidates
            .GroupBy(c => $"{c.Election} - {c.Position}")
            .ToDictionary(g => g.Key, g => g.OrderBy(c => c.Name).ToList());

        CurrentPages = GroupedCandidates.Keys
            .ToDictionary(k => k, _ => 1);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterCandidates();
        }
    }

    private void FilterCandidates()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            GroupCandidates();
            return;
        }

        var filtered = Candidates
            .Where(c => c.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                       c.Party.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                       c.Position.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                       c.Election.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();

        GroupedCandidates = filtered
            .GroupBy(c => $"{c.Election} - {c.Position}")
            .ToDictionary(g => g.Key, g => g.ToList());

        CurrentPages = GroupedCandidates.Keys
            .ToDictionary(k => k, _ => 1);
    }

    private IEnumerable<CandidateSerializedDto> GetPagedCandidates(string position)
    {
        return GroupedCandidates.TryGetValue(position, out var candidates) 
            ? candidates.Skip((CurrentPages[position] - 1) * PageSize).Take(PageSize)
            : Enumerable.Empty<CandidateSerializedDto>();
    }

    private int GetTotalPages(string position)
    {
        return GroupedCandidates.TryGetValue(position, out var candidates) 
            ? (int)Math.Ceiling(candidates.Count / (double)PageSize)
            : 0;
    }

    private void NextPage(string position)
    {
        if (CurrentPages[position] < GetTotalPages(position))
        {
            CurrentPages[position]++;
        }
    }

    private void PreviousPage(string position)
    {
        if (CurrentPages[position] > 1)
        {
            CurrentPages[position]--;
        }
    }

    private async Task DeleteCandidate(Guid candidateId)
    {
        try
        {
            var token = "";
            CandidateService.SetBearerToken(token);
            
            await CandidateService.DeleteCandidateAsync(candidateId);
            @* ToastService.ShowSuccess("Candidate deleted successfully"); *@
            
            await LoadCandidates();
            AdjustPaginationAfterDeletion();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            @* ToastService.ShowError($"Delete failed: {ex.Message}"); *@
        }
    }

    private void AdjustPaginationAfterDeletion()
    {
        foreach (var position in GroupedCandidates.Keys.ToList())
        {
            var totalPages = GetTotalPages(position);
            if (CurrentPages[position] > totalPages)
            {
                CurrentPages[position] = totalPages > 0 ? totalPages : 1;
            }
        }
    }

    private void ViewProfile(Guid candidateId)
    {
        // Navigation logic
    }

    private void EditCandidate(Guid candidateId)
    {
        // Edit logic
    }
}