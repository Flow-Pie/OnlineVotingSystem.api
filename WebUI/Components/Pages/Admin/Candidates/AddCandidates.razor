@page "/add-candidate"
@using OnlineVotingSystem.api.DTOs.Candidate
@using OnlineVotingSystem.api.DTOs.Position
@using System.ComponentModel.DataAnnotations
@using WebUI.Services
@using OnlineVotingSystem.api.DTOs.ElectionPosition
@using OnlineVotingSystem.api.DTOs.User
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt;
@using System.Net
@using System.IdentityModel.Tokens.Jwt
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@inject ICandidatesService CandidatesService
@inject IUsersService UsersService
@inject IElectionsService ElectionsService
@rendermode InteractiveServer


<main class="container mt-4 scrollable-container">
    <style>
       
        .scrollable-container {
            max-height: calc(100vh - 100px);
            overflow-y: auto;
            padding-right: 0.5rem;
        }

        .card {
            border: 2px solid var(--enterprise-border);
            border-radius: 0.75rem;
            transition: transform 0.15s ease, box-shadow 0.15s ease;
        }

        .card-header {
            background-color: rgba(42, 92, 141, 0.08);
            border-bottom: 2px solid var(--enterprise-border);
            padding: 1.25rem 1.5rem;
        }

        .form-control, .form-select {
            border: 2px solid var(--enterprise-border);
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--enterprise-accent);
            box-shadow: 0 0 0 0.25rem rgba(72, 163, 198, 0.2);
        }

        .btn-primary {
            background-color: var(--enterprise-primary);
            border-color: var(--enterprise-primary);
            padding: 0.5rem 1.5rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #234d75;
            border-color: #234d75;
            transform: translateY(-1px);
        }

        .btn-outline-secondary {
            border-color: var(--enterprise-border);
            color: var(--enterprise-secondary);
        }

        .alert {
            border: 2px solid transparent;
            border-radius: 0.75rem;
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.08);
            border-color: var(--enterprise-danger);
            color: var(--enterprise-danger);
        }

        .alert-success {
            background-color: rgba(58, 157, 133, 0.08);
            border-color: var(--enterprise-success);
            color: var(--enterprise-success);
        }

        .text-muted {
            color: var(--enterprise-secondary) !important;
        }

        .border-primary-subtle {
            border-color: rgba(42, 92, 141, 0.15) !important;
        }

        .status-container .alert {
            box-shadow: 0 2px 8px rgba(42, 92, 141, 0.08);
        }
    </style>

    <header class="mb-5">
        <h1 class="fw-bold display-6 text-primary">Add New Candidate</h1>
        <hr class="border-primary opacity-50" style="height: 2px">
    </header>

    <!-- Status alerts -->
    <div class="status-container position-fixed top-0 p-3" style="z-index: 9999">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger d-flex align-items-center shadow-sm">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div class="flex-grow-1">@errorMessage</div>
                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success d-flex align-items-center shadow-sm">
                <i class="bi bi-check-circle-fill me-2"></i>
                <div class="flex-grow-1">@successMessage</div>
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }
    </div>

    <!-- Candidate Form Card -->
    <div class="card border-primary-subtle shadow-lg">
        <div class="card-header">
            <h2 class="h5 mb-0 fw-semibold text-primary">
                <i class="bi bi-person-plus me-2"></i>Candidate Details
            </h2>
        </div>
        <div class="card-body p-4">
            <!-- EditForm with model binding and submit handler -->
            <EditForm Model="@model" OnValidSubmit="AddCandidate">
                <div class="mb-4">
                    <div class="form-floating">
                        <input type="text"
                               class="form-control border-primary-subtle"
                               id="nationalId"
                               placeholder="Enter National ID"
                               @bind="model.NationalId" />
                        <label for="nationalId" class="text-muted">National ID</label>
                    </div>
                </div>
                <div class="mb-4">
                    <div class="form-floating">
                        <select class="form-select border-primary-subtle"
                                id="electionPositionId"
                                @bind="model.PositionId">
                            <option value="">Select a Position</option>
                            @foreach (var position in Positions)
                            {
                                <option value="@position.Id">@position.Name</option>
                            }
                        </select>
                        <label for="electionPositionId" class="text-muted">Position</label>
                    </div>
                </div>
                <div class="mb-4">
                    <div class="form-floating">
                        <input type="text"
                               class="form-control border-primary-subtle"
                               id="party"
                               placeholder="Party"
                               @bind="model.Party" />
                        <label for="party" class="text-muted">Party</label>
                    </div>
                </div>
                <div class="mb-4">
                    <div class="form-floating">
                        <textarea class="form-control border-primary-subtle"
                                  id="bio"
                                  placeholder="Bio"
                                  style="height: 100px"
                                  @bind="model.Bio"></textarea>
                        <label for="bio" class="text-muted">Bio</label>
                    </div>
                </div>
                <div class="d-flex gap-3 justify-content-end border-top pt-4 mt-4">
                    <button type="reset"
                            class="btn btn-outline-secondary px-4"
                            @onclick="ResetForm">
                        <i class="bi bi-arrow-counterclockwise me-2"></i>Reset
                    </button>
                    <button type="submit"
                            class="btn btn-primary px-4"
                            disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-person-add me-2"></i>
                        }
                        Add Candidate
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</main>


@code {
    private CandidateFormModel model = new();
    private List<PositionDetails> Positions = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    [Inject] private ICandidatesService CandidateService { get; set; }
    [Inject] private IAuthService AuthService { get; set; }
    [Inject] private IPositionsService PositionsService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            var token = await AuthService.GetTokenAsync();
            Console.WriteLine($"Auth Token: {token}");
            if (string.IsNullOrEmpty(token))
            {
                await HandleUnauthorized();
                return;
            }

            var positions = await PositionsService.GetPositionsAsync();
            Positions = positions?.ToList() ?? new List<PositionDetails>();

            if (!Positions.Any())
            {
                errorMessage = "No positions available. Create positions first.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Initialization error: {ex.Message}";
        }
    }

    private async Task AddCandidate()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";
        
        try 
        {
            // Client-side validation
            var validationErrors = new List<string>();
            
            if (model.NationalId.ToString().Length != 8)
                validationErrors.Add("National ID must be 8 digits");
            
            if (model.PositionId == Guid.Empty || !Positions.Any(p => p.Id == model.PositionId))
                validationErrors.Add("Invalid position selected");
            
            if (string.IsNullOrWhiteSpace(model.Bio))
                validationErrors.Add("Bio is required");

            if (validationErrors.Any())
            {
                errorMessage = string.Join(", ", validationErrors);
                return;
            }

            var candidateDto = new CreateCandidateDto(
                NationalId: model.NationalId.ToString("D8"),
                PositionId: model.PositionId,
                Party: model.Party,
                Bio: model.Bio,
                PhotoUrl: "http://www.avatar" // You might want to dynamically assign this in a real app
            );

            // Get the token
            var token = await AuthService.GetTokenAsync();

            // Pass the token directly to the CreateCandidateAsync method
            await CandidateService.CreateCandidateAsync(candidateDto, token);

            successMessage = "Candidate added successfully!";
            ResetForm();
        }      
        catch (ApiException apiEx)
        {
            // Extract meaningful API error response
            errorMessage = $"API Error ({(int)apiEx.StatusCode}): {apiEx.Message}";

            if (apiEx.ProblemDetails?.Detail != null)
            {
                errorMessage += $"\nDetails: {apiEx.ProblemDetails.Detail}";
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = "Network error: Unable to reach the server. Please try again later.";
            Console.WriteLine(httpEx); // Log for debugging
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine(ex); // Log for debugging
        }
        finally 
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleUnauthorized()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }

    private void ResetForm()
    {
        model = new CandidateFormModel();
        StateHasChanged();
    }

    public class CandidateFormModel
    {
        [Range(10000000, 99999999, ErrorMessage = "Must be 8 digits")]
        public int NationalId { get; set; }

        [Required(ErrorMessage = "Position is required")]
        public Guid PositionId { get; set; }

        [StringLength(100, ErrorMessage = "Party name too long")]
        public string Party { get; set; } = "";

        [Required(ErrorMessage = "Bio is required")]
        [StringLength(500, ErrorMessage = "Bio too long")]
        public string Bio { get; set; } = "";
    }
}
