@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

<head>    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">  
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="WebUI.styles.css" />   
</head>

<div class="page">
    @if (!ShouldHideSidebar())
    {
        <div class="sidebar">
            <NavMenu />
        </div>
    }

    <main>
        <div class="top-row px-4">
            <button class="btn btn-outline-danger" @onclick="async () => await Logout()">
                <i class="bi bi-box-arrow-right"></i> Logout
            </button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool ShouldHideSidebar()
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        return currentPath.StartsWith("login", StringComparison.OrdinalIgnoreCase) ||
               currentPath.StartsWith("register", StringComparison.OrdinalIgnoreCase) ||
               currentPath.StartsWith("home", StringComparison.OrdinalIgnoreCase);
    }

    private async Task Logout()
    {
        try
        {
            await AuthService.LogoutAsync();
            await JSRuntime.InvokeVoidAsync("console.log", "User logged out");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout failed: {ex.Message}");
            // Consider showing an error message to the user
        }
    }
}